<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kylin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codekylin.cn/"/>
  <updated>2022-02-11T07:42:50.018Z</updated>
  <id>https://www.codekylin.cn/</id>
  
  <author>
    <name>Kylin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins自动部署环境准备</title>
    <link href="https://www.codekylin.cn/34480.html"/>
    <id>https://www.codekylin.cn/34480.html</id>
    <published>2022-02-11T07:39:34.000Z</published>
    <updated>2022-02-11T07:42:50.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven安装和配置"><a href="#Maven安装和配置" class="headerlink" title="Maven安装和配置"></a>Maven安装和配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Jenkins集成服务器上，我们需要安装Maven来编译和打包项目。</p><p>下载<code>apache-maven-3.6.3-bin.tar.gz</code>。上传到<code>/usr/local/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127211111675.png" alt="image-20211127211111675"></p><p><code>source /etc/profile</code></p><p><code>mvn -v</code>查看Maven版本</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127211158702.png" alt="image-20211127211158702"></p><p>安装成功！</p><h3 id="全局工具配置关联JDK和Maven"><a href="#全局工具配置关联JDK和Maven" class="headerlink" title="全局工具配置关联JDK和Maven"></a>全局工具配置关联JDK和Maven</h3><p><code>Jenkins</code>-&gt;<code>Global Tool Configuration</code>-&gt;<code>JDK</code>-&gt;新增JDK，配置如下：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211127211334141.png" alt="image-20211127211334141"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127211513945.png" alt="image-20211127211513945"></p><p><code>Jenkins</code>-&gt;<code>Global Tool Configuration</code>-&gt;<code>Maven</code>-&gt;新增Maven，配置如下：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127211707817.png" alt="image-20211127211707817"></p><h3 id="添加Jenkins全局变量"><a href="#添加Jenkins全局变量" class="headerlink" title="添加Jenkins全局变量"></a>添加Jenkins全局变量</h3><p> <code>Manage Jenkins</code>-&gt;<code>Configure System</code>-&gt;<code>Global Properties</code> ，添加三个全局变量 </p><ol><li>JAVA_HOME</li><li>M2_HOME</li><li>PATH+EXTRA</li></ol><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127212058730.png" alt="image-20211127212058730"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /repository</span><br><span class="line">vim /usr/<span class="built_in">local</span>/apache-maven-3.6.3/conf/settings.xml </span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127212705153.png" alt="image-20211127212705153"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127212835388.png" alt="image-20211127212835388"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>去项目配置里，添加<code>构建步骤</code>，添加<code>mvn clean package</code>命令</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127213426489.png" alt="image-20211127213426489"></p><p>可以看到此时正在执行Maven操作，并从阿里云镜像下载依赖。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127213538718.png" alt="image-20211127213538718"></p><p>成功打成war包。配置Maven成功！！</p><h2 id="Tomcat安装和配置"><a href="#Tomcat安装和配置" class="headerlink" title="Tomcat安装和配置"></a>Tomcat安装和配置</h2><p><code>cat /etc/sysconfig/network-scripts/ifcfg-eth1</code>修改ip</p><p><code>reboot</code>重启虚拟机</p><p>将tomcat包上传到虚拟机中</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128113914799.png" alt="image-20211128113914799"></p><p><code>tar -zxvf apache-tomcat-9.0.55.tar.gz</code></p><p>之后进入tomcat的bin目录下<code>./startup.sh</code>启动</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128114057370.png" alt="image-20211128114057370"></p><p>通过虚拟机<code>ip:8080</code>访问</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128114143186.png" alt="image-20211128114143186"></p><h3 id="配置Tomcat用户角色权限"><a href="#配置Tomcat用户角色权限" class="headerlink" title="配置Tomcat用户角色权限"></a>配置Tomcat用户角色权限</h3><p>默认情况下Tomcat是没有配置用户角色权限的。点击这里</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128114247132.png" alt="image-20211128114247132"></p><p>显示<code>403 Access Denied</code>没有访问权限</p><p>但是，后续Jenkins部署项目到Tomcat服务器，需要用到Tomcat的用户，所以修改tomcat以下配置， 添加用户及权限。</p><p><code>vim /usr/local/apache-tomcat-9.0.55/conf/tomcat-users.xml</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128114450331.png" alt="image-20211128114450331"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;tomcat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;role1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">password</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,tomcat,admin-gui,admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加以上内容</p><ul><li>用户和密码都是：tomcat</li><li>tomcat、role1、manager-script、manager-gui、manager-status、admin-gui、admin-script。7个权限</li></ul><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128114917823.png" alt="image-20211128114917823"></p><p>注意：为了能够刚才配置的用户登录到Tomcat，还需要修改以下配置</p><p><code>vim /usr/local/apache-tomcat-9.0.55/webapps/manager/META-INF/context.xml</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128115100140.png" alt="image-20211128115100140"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">allow</span>=<span class="string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>将上面内容注释掉</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128115229899.png" alt="image-20211128115229899"></p><p>接着重启tomcat</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128115258715.png" alt="image-20211128115258715"></p><p>再次点击，则会弹出输入框，填写用户名密码</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128115350574.png" alt="image-20211128115350574"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211128115411150.png" alt="image-20211128115411150"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven安装和配置&quot;&gt;&lt;a href=&quot;#Maven安装和配置&quot; class=&quot;headerlink&quot; title=&quot;Maven安装和配置&quot;&gt;&lt;/a&gt;Maven安装和配置&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装和插件使用</title>
    <link href="https://www.codekylin.cn/10464.html"/>
    <id>https://www.codekylin.cn/10464.html</id>
    <published>2022-02-11T07:33:47.000Z</published>
    <updated>2022-02-11T07:42:00.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装JDK</p><p>获取jenkins安装包</p><p>下载页面：<a href="https://jenkins.io/zh/download/">https://jenkins.io/zh/download/</a> </p><p>安装文件：jenkins-2.190.3-1.1.noarch.rpm</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127161449794.png" alt="image-20211127161449794"></p><p><code>rpm -ivh jenkins-2.190.3-1.1.noarch.rpm</code>命令安装</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127163146757.png" alt="image-20211127163146757"></p><p>修改Jenkins配置 </p><p><code>vi /etc/syscofig/jenkins</code></p><p>修改内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_USER=<span class="string">&quot;root&quot;</span> </span><br><span class="line">JENKINS_PORT=<span class="string">&quot;8888&quot;</span></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127163338517.png" alt="image-20211127163338517"></p><p>将用户改成<code>root</code>否则默认使用的是<code>jenkins</code>用户，则需要创建一个Linux用户。</p><p>启动Jenkins </p><p><code>systemctl start jenkins</code></p><p>出现问题<code>Jenkins bash: /usr/bin/java: No such file or directory</code></p><p><code>vim /etc/init.d/jenkins</code>编辑文件，将<code>candidates</code>加入自己配置的<code>JAVA_HOME</code>的<code>bin</code>下的<code>java</code>命令</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127165838709.png" alt="image-20211127165838709"></p><p>再次启动Jenkins </p><p><code>systemctl start jenkins</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127170159710.png" alt="image-20211127170159710"></p><p><code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127171358510.png" alt="image-20211127171358510"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127171518201.png" alt="image-20211127171518201"></p><p>因为Jenkins插件需要连接默认官网下载，速度非常慢，而且经过会失败，所以我们暂时先跳过插件安装。选择<code>无</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127171545502.png" alt="image-20211127171545502"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127171649639.png" alt="image-20211127171649639"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127171715835.png" alt="image-20211127171715835"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127171732189.png" alt="image-20211127171732189"></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Jenkins本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从Gitlab拉取代码，使用 Maven构建项目等功能需要依靠插件完成。</p><p>接下来演示如何下载插件。</p><p> 修改Jenkins插件下载地址 Jenkins国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址： <code>Jenkins-&gt;Manage Jenkins-&gt;Manage Plugins</code>，点击<code>Available</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127172428362.png" alt="image-20211127172428362"></p><p>这样做是为了把Jenkins官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/jenkins/updates</span><br><span class="line">sed -i <span class="string">&#x27;s/http:\/\/updates.jenkinsci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27;</span> default.json &amp;&amp; sed -i <span class="string">&#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27;</span> default.json</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127172743925.png" alt="image-20211127172743925"></p><p>最后，Manage Plugins点击Advanced，把Update Site改为国内插件下载地址</p><p><code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127172152224.png" alt="image-20211127172152224"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127173016300.png" alt="image-20211127173016300"></p><p>下载汉化插件，安装后重启</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127173243590.png" alt="image-20211127173243590"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127173339466.png" alt="image-20211127173339466"></p><p>重启完成之后，变成中文</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127173432767.png" alt="image-20211127173432767"></p><h2 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h2><p>我们可以利用<code>Role-based Authorization Strategy</code> 插件来管理Jenkins用户权限。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127174258159.png" alt="image-20211127174258159"></p><p>页面变了是因为让我升了级….</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127174703206.png" alt="image-20211127174703206"></p><p>更改<code>授权策略</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127174836993.png" alt="image-20211127174836993"></p><p>接着就会多出一个<code>Manage and Assign Roles</code>点击</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127175133124.png" alt="image-20211127175133124"></p><p>选择<code>Manage Roles</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127175200645.png" alt="image-20211127175200645"></p><p>可以看见这里有三个角色权限</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127200727933.png" alt="image-20211127200727933"></p><ul><li>Global roles 全局角色</li><li>Item roles 项目角色（Pattern可以用正则表达式，匹配项目名）</li><li>Node roles</li></ul><h2 id="凭证管理"><a href="#凭证管理" class="headerlink" title="凭证管理"></a>凭证管理</h2><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab密码信息、Docker私有仓库密码等，以便 Jenkins可以和这些第三方的应用进行交互。</p><p>要在Jenkins使用凭证管理功能，需要安装<code>Credentials Binding</code>插件</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127201017576.png" alt="image-20211127201017576"></p><p>点击<code>Manage Credentials</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127201545573.png" alt="image-20211127201545573"></p><p>点击<code>全局</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127201650186.png" alt="image-20211127201650186"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127201731398.png" alt="image-20211127201731398"></p><p>点击<code>添加凭证</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127201827484.png" alt="image-20211127201827484"></p><p>有5种类型的凭证</p><ol><li><p>Username with password：用户名和密码 </p></li><li><p>SSH Username with private key： 使用SSH用户和密钥 </p></li><li><p>Secret file：需要保密的文本文件，使用时Jenkins会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的Secret file就会被删除。 </p></li><li><p>Secret text：需要保存的一个加密的文本串，如钉钉机器人或Github的api token </p></li><li><p>Certificate：通过上传证书文件的方式</p></li></ol><p>常用的凭证类型有：<code>Username with password</code>（用户密码）和<code>SSH Username with private key</code>（SSH 密钥）</p><p>接下来以使用Git工具到Gitlab拉取项目源码为例，演示Jenkins的如何管理Gitlab的凭证。</p><h2 id="安装Git插件和Git工具"><a href="#安装Git插件和Git工具" class="headerlink" title="安装Git插件和Git工具"></a>安装Git插件和Git工具</h2><p>安装Git插件和Git工具</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127203624953.png" alt="image-20211127203624953"></p><p>CentOS7上安装Git工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y 安装 </span><br><span class="line">git --version 安装后查看版本</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127203745370.png" alt="image-20211127203745370"></p><p>接着我们创建一个用户密码凭证</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127204125525.png" alt="image-20211127204125525"></p><p>用户名和密码就是我们先前创建的gitlab账户</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211127204158277.png" alt="image-20211127204158277"></p><p>接着新建一个任务</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211127204217187.png" alt="image-20211127204217187"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211127204302938.png" alt="image-20211127204302938"></p><p><code>源码管理</code>—-&gt;<code>Git</code>填写gitlab项目仓库地址，选择我们先前创建的凭证</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211127204721960.png" alt="image-20211127204721960"></p><p>点击<code>立即构建</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127204922402.png" alt="image-20211127204922402"></p><p>成功构建。查看<code>工作空间</code>可以发现文件与gitlab的一致</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127205040401.png" alt="image-20211127205040401"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;安装JDK&lt;/p&gt;
&lt;p&gt;获取jenkins安装包&lt;/p&gt;
&lt;p&gt;下载页面：&lt;a href=&quot;https://jenkins.io/zh/d
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>GitLab的安装使用</title>
    <link href="https://www.codekylin.cn/29138.html"/>
    <id>https://www.codekylin.cn/29138.html</id>
    <published>2022-02-11T07:25:20.000Z</published>
    <updated>2022-02-11T07:32:05.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fblog.02868.cn%2Fzb_users%2Fupload%2F2019%2F10%2F20191018113103GitLab.png&refer=http%3A%2F%2Fblog.02868.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1647156525&t=2a71ff991ba65545fbf6ea8cc84ab8fc" alt="img"></p><p>GitLab是一个利用 <a href="http://www.oschina.net/p/ruby+on+rails">Ruby on Rails</a> 开发的开源应用程序，实现一个自托管的<a href="http://www.oschina.net/p/git">Git</a>项目仓库，可通过Web界面进行访问公开的或者私人项目。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yum -y install policycoreutils openssh-server openssh-clients postfix</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127120928887.png" alt="image-20211127120928887"></p><p><code>systemctl enable sshd &amp;&amp; sudo systemctl start sshd</code></p><p><code>systemctl enable postfix &amp;&amp; systemctl start postfix</code></p><p><code>wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-12.4.2-ce.0.el6.x86_64.rpm</code></p><p>命令运行失败，点击链接下载，上传到服务器即可。</p><p>安装</p><p><code>rpm -ivh gitlab-ce-12.4.2-ce.0.el6.x86_64.rpm</code></p><p><code>rpm -ivh --replacepkgs gitlab-ce-12.4.2-ce.0.el6.x86_64.rpm</code>覆盖安装</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127130330500.png" alt="image-20211127130330500"></p><p><code>vi /etc/gitlab/gitlab.rb</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127130556277.png" alt="image-20211127130556277"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127130330500.png" alt="image-20211127130826152"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://192.168.56.11:82&#x27;</span></span><br><span class="line">nginx[<span class="string">&#x27;listen_port&#x27;</span>] = 82</span><br></pre></td></tr></table></figure><p> 重载配置及启动gitlab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restar</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127131356227.png" alt="image-20211127131356227"></p><p>花了3分28秒….</p><p>把端口添加到防火墙 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=82/tcp --permanent firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127131452164.png" alt="image-20211127131452164"></p><p>设置<code>root</code>账户密码</p><h2 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h2><p>使用管理员 root 创建组，一个组里面可以有多个项目分支，可以将开发添加到组里面进行设置权限， 不同的组就是公司不同的开发项目或者服务模块，不同的组添加不同的开发即可实现对开发设置权限的管理</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127133115734.png" alt="image-20211127133115734"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127133459534.png" alt="image-20211127133459534"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127133611696.png" alt="image-20211127133611696"></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在group创建项目</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127135423300.png" alt="image-20211127135423300"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127135524312.png" alt="image-20211127135524312"></p><p>也可以在<code>Projects</code>中创建项目</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127135654423.png" alt="image-20211127135654423"></p><p>可以选择项目是属于<code>group</code>还是<code>user</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127135739759.png" alt="image-20211127135739759"></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127135953925.png" alt="image-20211127135953925"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127140345965.png" alt="image-20211127140345965"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127140830701.png" alt="image-20211127140830701"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127140913038.png" alt="image-20211127140913038"></p><p>再<code>edit</code>中添加密码</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127141012364.png" alt="image-20211127141012364"></p><h2 id="将用户添加到组中"><a href="#将用户添加到组中" class="headerlink" title="将用户添加到组中"></a>将用户添加到组中</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127142603640.png" alt="image-20211127142603640"></p><p>Gitlab用户在组里面有5种不同权限：</p><ol><li>Guest：可以创建issue、发表评论，不能读写版本库</li><li>Reporter：可以克隆代码，不能提交，QA、PM 可以赋予这个权限 </li><li>Developer：可以克隆代码、开发、提交、push，普通开发可以赋予这个权限 </li><li>Maintainer：可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心开发可以赋予这个权限 </li><li>Owner：可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组组 长可以赋予这个权限</li></ol><p>这里给<code>kylin</code>赋予<code>Owner</code>的权限，登录。第一次登录会让修改密码。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211127160603709.png" alt="image-20211127160603709"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;img src= &quot;https://gitee.com/kylincw/images/raw/master/loading.gif&quot; da
      
    
    </summary>
    
    
    
      <category term="GitLab" scheme="https://www.codekylin.cn/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>超详细的Vagrant上手指南</title>
    <link href="https://www.codekylin.cn/47602.html"/>
    <id>https://www.codekylin.cn/47602.html</id>
    <published>2022-01-30T02:35:56.000Z</published>
    <updated>2022-01-30T02:37:31.052Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载<a href="https://zhuanlan.zhihu.com/p/259833884">https://zhuanlan.zhihu.com/p/259833884</a></p></blockquote><p>搭建 Linux 虚拟机，别再用 VirtualBox 从 .iso 文件安装了。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>2020 年了，也许你已经习惯了 docker，习惯了在 XX 云上快速创建云主机，但是如果你想在个人电脑上安装虚拟机来搭建开发/测试环境，Vagrant 仍然不失高效之选。</p><blockquote><p>文末有和 docker 的对比说明。</p></blockquote><p><strong>本篇内容字数过万，收藏的同时别忘了点个赞，谢谢！</strong></p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p><strong>安装 VirtualBox</strong></p><p>进入 VirtualBox 的<a href="https://link.zhihu.com/?target=https%3A//www.virtualbox.org/">主页</a>，点击大大的下载按钮，即可进入下载页面。</p><p>VirtualBox 是一个跨平台的虚拟化工具，支持多个操作系统，根据自己的情况选择对应的版本下载即可。</p><p>注意，除了主程序，还要把对应的<strong>扩展包程序</strong>也一并下载了。有些高级特性，比如 USB 3.0 等需要扩展包的支持。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic3.zhimg.com/80/v2-a1225a9c7e8d405a35588542342cc6da_1440w.jpg" alt="img"></p><p>在安装完主程序后，直接双击扩展包文件即可安装扩展包。</p><blockquote><p>下载页面先别关，后面还要用到。</p></blockquote><p><strong>安装 Vagrant</strong></p><p>在 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/">Vagant 网站</a>下载最新的版本，根据自己的操作系统选择对应的版本下载即可。</p><p>注意，Vagrant 是没有图形界面的，所以安装完成后也没有桌面快捷方式。具体使用方法，接下来会详细说明。</p><p>Vagrant 的安装程序会自动把安装路径加入到 PATH 环境变量，所以，这时候可以通过命令行执行 <code>vagrant version</code> 检查是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; vagrant version</span><br><span class="line">Installed Version: 2.2.7</span><br><span class="line">Latest Version: 2.2.8</span><br></pre></td></tr></table></figure><h2 id="配置虚机存放位置"><a href="#配置虚机存放位置" class="headerlink" title="配置虚机存放位置"></a>配置虚机存放位置</h2><p>创建虚拟机会占用较多的磁盘空间，在 Windows 系统下默认的虚机创建位置是在 C 盘，所以最好配置到其它地方。</p><p><strong>配置 VirtualBox</strong></p><p>启动 VirtualBox 后，通过菜单 <code>管理</code> -&gt; <code>全局设定</code>，或者按下快捷键 <code>Ctrl + g</code>，在全局设定对话框中，修改 <code>默认虚拟电脑位置</code>，指定一个容量较大的磁盘。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic3.zhimg.com/80/v2-4371dddf89e26ad3de5dded485a28eaa_1440w.jpg" alt="img"></p><p><strong>配置 Vagrant</strong></p><p>通过 Vagrant 创建虚机需要先导入镜像文件，也就是 <code>box</code>，它们默认存储的位置在用户目录下的 <code>.vagrant.d</code> 目录下，对于 Windows 系统来说，就是 <code>C:\Users\用户名\.vagrant.d</code>。</p><p>如果后续可能会用到较多镜像，或者你的 C 盘空间比较紧缺，可以通过设置环境变量 <code>VAGRANT_HOME</code> 来设置该目录。</p><p>在 Windows 系统中，可以这样操作：新建系统环境变量，环境变量名为 <code>VAGRANT_HOME</code>，变量值为 <code>E:\VirtualBox\.vagrant.d</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic4.zhimg.com/80/v2-50a5223ae160aa6452991357a29b62b3_1440w.jpg" alt="img"></p><blockquote><p><strong>注意</strong>，最后这个 <code>.vagrant.d</code> 目录名称不是必须的，但是建议保持一致，这样一眼看上去就能知道这个目录是做什么用处的了。</p></blockquote><h2 id="下载虚机镜像"><a href="#下载虚机镜像" class="headerlink" title="下载虚机镜像"></a>下载虚机镜像</h2><p>使用 Vagrant 创建虚机时，需要指定一个镜像，也就是 <code>box</code>。开始这个 box 不存在，所以 Vagrant 会先从网上下载，然后缓存在本地目录中。</p><p>Vagrant 有一个<a href="https://link.zhihu.com/?target=https%3A//app.vagrantup.com/boxes/search">镜像网站</a>，里面列出了都有哪些镜像可以用，并且提供了操作文档。</p><p>但是这里默认下载往往会比较慢，所以下面我会介绍如何在其它地方下载到基础镜像，然后按照自己的需要重置。如果网速较好，下载顺利的朋友可以选择性地跳过部分内容。</p><p>下面我给出最常用的两个 Linux 操作系统镜像的下载地址：</p><p><strong>CentOS</strong></p><p>CentOS 的镜像下载网站是： <a href="https://link.zhihu.com/?target=http%3A//cloud.centos.org/centos/">http://cloud.centos.org/centos/</a></p><p>在其中选择自己想要下载的版本，列表中有一个 <code>vagrant</code> 目录，里面是专门为 vagrant 构建的镜像。选择其中的 <code>.box</code> 后缀的文件下载即可。这里可以使用下载工具，以较快的速度下载下来。</p><p>这里我们选择下载的是 <a href="https://link.zhihu.com/?target=http%3A//cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7.box">CentOS 7 的最新版本</a></p><p><strong>Ubuntu</strong></p><p>Ubuntu 的镜像下载网站是： <a href="https://link.zhihu.com/?target=http%3A//cloud-images.ubuntu.com/">http://cloud-images.ubuntu.com/</a></p><p>同样先选择想要的版本，然后选择针对 vagrant 的 <code>.box</code> 文件即可。</p><p>如果这里官网的速度较慢，还可以从 <a href="https://link.zhihu.com/?target=https%3A//mirror.tuna.tsinghua.edu.cn/ubuntu-cloud-images/">清华大学的镜像站</a> 下载。</p><p>下面的例子以 CentOS 7 为例，使用其它版本操作系统的也可以参考。</p><h2 id="添加-box"><a href="#添加-box" class="headerlink" title="添加 box"></a>添加 box</h2><p>接下来我们需要将下载后的 <code>.box</code> 文件添加到 vagrant 中。</p><p>Vagrant 没有 GUI，只能从命令行访问，先启动一个命令行，然后执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box list</span><br><span class="line">There are no installed boxes! Use `vagrant box add` to add some.</span><br></pre></td></tr></table></figure><p>提示现在还没有 box。如果这是第一次运行，此时 <code>VAGRANT_HOME</code> 目录下会自动生成若干的文件和文件夹，其中有一个 <code>boxes</code> 文件夹，这就是要存放 box 文件的地方。</p><p>执行 <code>vagrant box add</code> 命令添加 box:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add e:\Downloads\CentOS-7.box --name centos-7</span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box &#x27;centos-7&#x27; (v0) for provider:</span><br><span class="line">    box: Unpacking necessary files from: file:///e:/Downloads/CentOS-7.box</span><br><span class="line">    box:</span><br><span class="line">==&gt; box: Successfully added box &#x27;centos-7&#x27; (v0) for &#x27;virtualbox&#x27;!</span><br></pre></td></tr></table></figure><p>命令后面跟着的是下载的文件路径，并且通过 <code>--name centos-7</code> 为这个 box 指定一个名字。</p><p>后面创建虚机都需要指定这个名字，所以尽量把名字取得简短一点，同时也要能标识出这个镜像的信息（我们后面会定制自己的基础镜像，所以这里可以简单点）。</p><p>再次查询，可以看到有了一个 box：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box list</span><br><span class="line">centos-7 (virtualbox, 0)</span><br></pre></td></tr></table></figure><h2 id="Vagrant-基本操作"><a href="#Vagrant-基本操作" class="headerlink" title="Vagrant 基本操作"></a>Vagrant 基本操作</h2><h3 id="新建虚机"><a href="#新建虚机" class="headerlink" title="新建虚机"></a>新建虚机</h3><p>创建一个目录，先执行 <code>vagrant init</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir demo</span><br><span class="line">$ cd demo</span><br><span class="line">$ vagrant init centos-7</span><br><span class="line">A `Vagrantfile` has been placed in this directory. You are now</span><br><span class="line">ready to `vagrant up` your first virtual environment! Please read</span><br><span class="line">the comments in the Vagrantfile as well as documentation on</span><br><span class="line">`vagrantup.com` for more information on using Vagrant.</span><br></pre></td></tr></table></figure><p>其中的 <code>centos-7</code> 就是我们要使用的 <code>box</code> 名字。</p><p>这个命令只是为我们生成一个 <code>Vagrantfile</code>，所以，这里的名字没指定或者写错了都没关系，后面会介绍如何编辑这个 <code>Vagrantfile</code> 来修改。</p><h3 id="启动虚机"><a href="#启动虚机" class="headerlink" title="启动虚机"></a>启动虚机</h3><p>我们等会再来细看这个文件，现在直接按照提示执行 <code>vagrant up</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">==&gt; default: Importing base box &#x27;centos-7&#x27;...</span><br><span class="line">==&gt; default: Matching MAC address for NAT networking...</span><br><span class="line">==&gt; default: Setting the name of the VM: demo_default_1588406874156_65036</span><br><span class="line">==&gt; default: Clearing any previously set network interfaces...</span><br><span class="line">==&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">    default: Adapter 1: nat</span><br><span class="line">==&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">==&gt; default: Booting VM...</span><br><span class="line">==&gt; default: Waiting for machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br></pre></td></tr></table></figure><p>正常的情况下，不到一分钟应该就能启动成功了。</p><blockquote><p>这里我遇到点问题，2222 端口转发出现未知错误，造成 vagrant 的启动超时。检查了这个端口并没被占用，同时更改大一点的端口可以转发成功，所以应该是系统哪里有点问题。在后面我介绍了如何处理，如果你也遇到和我一样的情况，可先跳到下面查看。</p></blockquote><p>注意到这里包含的信息：</p><ul><li>虚机名称：<code>demo_default_1588406874156_65036</code>（想改？最后有提）</li><li>网卡：<code>Adapter 1: nat</code>，第一块网卡，NAT 模式，这是固定的</li><li>端口转发：<code>22 (guest) =&gt; 2222 (host) (adapter 1)</code>，把虚机的 22 端口，映射到宿主机的 2222 端口上，这样就可以通过 <code>127.0.0.1:2222</code> 访问虚拟机了</li><li>SSH 用户名：<code>vagrant</code>，这里使用 <code>private key</code> 登录</li></ul><blockquote><p>密码也是 <code>vagrant</code>，但是密码方式仅供直接登录，是不能通过 SSH 登录的。</p></blockquote><h3 id="查看虚机状态"><a href="#查看虚机状态" class="headerlink" title="查看虚机状态"></a>查看虚机状态</h3><p>执行下面的命令可以查看虚机的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vagrant status</span><br><span class="line"></span><br><span class="line">Current machine states:</span><br><span class="line"></span><br><span class="line">default                   running (virtualbox)</span><br><span class="line"></span><br><span class="line">The VM is running. To stop this VM, you can run `vagrant halt` to</span><br><span class="line">shut it down forcefully, or you can run `vagrant suspend` to simply</span><br><span class="line">suspend the virtual machine. In either case, to restart it again,</span><br><span class="line">simply run `vagrant up`.</span><br></pre></td></tr></table></figure><p>该命令还提示了如何操作虚机，我们继续一一介绍</p><h3 id="连接虚机"><a href="#连接虚机" class="headerlink" title="连接虚机"></a>连接虚机</h3><p>如果启动没问题，接下来执行 <code>vagrant ssh</code> 就能以 <code>vagrant</code> 用户直接登入虚机中。</p><p><code>root</code> 用户没有默认密码，也不能直接登录。需要 root 权限的命令可以通过在命令前添加 <code>sudo</code> 来执行，也可以执行 <code>sudo -i</code> 直接切换到 <code>root</code> 用户。</p><p>这时候打开 VirtualBox 程序，可以看到自动创建的虚机：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic4.zhimg.com/80/v2-34eb6f9e2fc34aea3ae2d4d80328ff7f_1440w.jpg" alt="img"></p><p>我们也可以在 VirtualBox 的终端上登录系统，默认的登录用户名和密码都是 <code>vagrant</code>。</p><p>当然还可以使用其它的 SSH 连接工具例如 XShell，SecureCRT 连接，但是这里默认网卡使用的是 NAT 模式，没有指定 IP，实际应用并不方便，我们在后面介绍网络配置时再详细介绍如何连接虚机。</p><h3 id="停止虚机"><a href="#停止虚机" class="headerlink" title="停止虚机"></a>停止虚机</h3><p>执行下面的命令可以关闭虚机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure><p>直接在 VirtualBox 上关闭虚机，或者直接在虚机内部执行 <code>poweroff</code> 命令也都是可以的。</p><h3 id="暂停虚机"><a href="#暂停虚机" class="headerlink" title="暂停虚机"></a>暂停虚机</h3><p>执行下面的命令可以暂停虚机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant suspend</span><br></pre></td></tr></table></figure><h3 id="恢复虚机"><a href="#恢复虚机" class="headerlink" title="恢复虚机"></a>恢复虚机</h3><p>执行下面的命令把暂停状态的虚机恢复运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant resume</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 不管虚机是关闭还是暂停状态，甚至是 error 状态，都可以执行 <code>vagrant up</code> 来让虚机恢复运行。</p><h3 id="重载虚机"><a href="#重载虚机" class="headerlink" title="重载虚机"></a>重载虚机</h3><p>执行下面的命令会重启虚机，并且重新加载 <code>Vagrantfile</code> 中的配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure><h3 id="删除虚机"><a href="#删除虚机" class="headerlink" title="删除虚机"></a>删除虚机</h3><p>最后，执行下面的命令可以彻底删除虚机，包括整个虚机文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在当前这个小例子中，上面所有的 <code>vagrant</code> 命令都需要在 <code>Vagrantfile</code> 所在的目录下执行。</p><h2 id="初识-Vagrantfile"><a href="#初识-Vagrantfile" class="headerlink" title="初识 Vagrantfile"></a>初识 Vagrantfile</h2><p>先来认识一下默认的 <code>Vagrantfile</code> 文件，使用带语法高亮的文本编辑器（例如 VSCode） 打开:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: ruby -*-</span><br><span class="line"># vi: set ft=ruby :</span><br><span class="line"></span><br><span class="line"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span><br><span class="line"># configures the configuration version (we support older styles for</span><br><span class="line"># backwards compatibility). Please don&#x27;t change it unless you know what</span><br><span class="line"># you&#x27;re doing.</span><br><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  # The most common configuration options are documented and commented below.</span><br><span class="line">  # For a complete reference, please see the online documentation at</span><br><span class="line">  # https://docs.vagrantup.com.</span><br><span class="line"></span><br><span class="line">  # Every Vagrant development environment requires a box. You can search for</span><br><span class="line">  # boxes at https://vagrantcloud.com/search.</span><br><span class="line">  config.vm.box = &quot;centos-7&quot;</span><br><span class="line"></span><br><span class="line">  # Disable automatic box update checking. If you disable this, then</span><br><span class="line">  # boxes will only be checked for updates when the user runs</span><br><span class="line">  # `vagrant box outdated`. This is not recommended.</span><br><span class="line">  # config.vm.box_check_update = false</span><br><span class="line"></span><br><span class="line">  # Create a forwarded port mapping which allows access to a specific port</span><br><span class="line">  # within the machine from a port on the host machine. In the example below,</span><br><span class="line">  # accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span><br><span class="line">  # NOTE: This will enable public access to the opened port</span><br><span class="line">  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span><br><span class="line"></span><br><span class="line">  # Create a forwarded port mapping which allows access to a specific port</span><br><span class="line">  # within the machine from a port on the host machine and only allow access</span><br><span class="line">  # via 127.0.0.1 to disable public access</span><br><span class="line">  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">  # Create a private network, which allows host-only access to the machine</span><br><span class="line">  # using a specific IP.</span><br><span class="line">  # config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span><br><span class="line"></span><br><span class="line">  # Create a public network, which generally matched to bridged network.</span><br><span class="line">  # Bridged networks make the machine appear as another physical device on</span><br><span class="line">  # your network.</span><br><span class="line">  # config.vm.network &quot;public_network&quot;</span><br><span class="line"></span><br><span class="line">  # Share an additional folder to the guest VM. The first argument is</span><br><span class="line">  # the path on the host to the actual folder. The second argument is</span><br><span class="line">  # the path on the guest to mount the folder. And the optional third</span><br><span class="line">  # argument is a set of non-required options.</span><br><span class="line">  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br><span class="line"></span><br><span class="line">  # Provider-specific configuration so you can fine-tune various</span><br><span class="line">  # backing providers for Vagrant. These expose provider-specific options.</span><br><span class="line">  # Example for VirtualBox:</span><br><span class="line">  #</span><br><span class="line">  # config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">  #   # Display the VirtualBox GUI when booting the machine</span><br><span class="line">  #   vb.gui = true</span><br><span class="line">  #</span><br><span class="line">  #   # Customize the amount of memory on the VM:</span><br><span class="line">  #   vb.memory = &quot;1024&quot;</span><br><span class="line">  # end</span><br><span class="line">  #</span><br><span class="line">  # View the documentation for the provider you are using for more</span><br><span class="line">  # information on available options.</span><br><span class="line"></span><br><span class="line">  # Enable provisioning with a shell script. Additional provisioners such as</span><br><span class="line">  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span><br><span class="line">  # documentation for more information about their specific syntax and use.</span><br><span class="line">  # config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">  #   apt-get update</span><br><span class="line">  #   apt-get install -y apache2</span><br><span class="line">  # SHELL</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这是一个 Ruby 语法的文件，因为 Vagrant 就是用 Ruby 编写的。如果编辑器没有语法高亮可以手动设置文件类型为 Ruby。</p><p>这个缺省文件内容几乎都是注释，提示有哪些配置项可以修改，我们不需要去学 Ruby 编程也可以照葫芦画瓢的完成基本的配置。</p><blockquote><p>当然，如果会 Ruby 编程的可以在此实现更高级的作用，但是绝大多数人用不着。</p></blockquote><p>刨除注释，这个文件的实际生效内容实际只有 3 行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;centos-7&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>首尾两行组成一个代码块结构，不要去动它，除非你知道自己在干什么。我们平常只需要编辑这其中的配置项。</p><p>这里的 <code>config.vm.box</code> 对应的就是虚机的镜像，也就是 box 文件，这是唯一必填的配置项。</p><p>特别提醒，<code>Vagrantfile</code> 文件名是固定的写法，大小写也要完全一样，修改了就不认识了。</p><h2 id="自定义配置-Vagrantfile"><a href="#自定义配置-Vagrantfile" class="headerlink" title="自定义配置 Vagrantfile"></a>自定义配置 Vagrantfile</h2><p>下面我将针对这份默认的 <code>Vagrantfile</code> 内容，逐个讲解其中的配置含义和如何根据实际情况修改。</p><h3 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h3><p>端口转发（Port forward）又叫端口映射，就是把虚机的某个端口，映射到宿主机的端口上。这样就能在宿主机上访问到虚拟机中的服务。</p><p>例如启动虚机时，默认的 <code>22 (guest) =&gt; 2222 (host) (adapter 1)</code> 就是把虚机的 SSH 服务端口（<code>22</code>）映射到宿主机的 <code>2222</code> 端口，这样直接在宿主机通过 ssh 客户端访问 <code>127.0.0.1:2222</code> 端口就等价于访问虚拟机的 <code>22</code> 端口。</p><p>下面这两段配置就是教我们如何配置额外的端口转发规则，例如把 Web 服务也映射出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Create a forwarded port mapping which allows access to a specific port</span><br><span class="line"># within the machine from a port on the host machine. In the example below,</span><br><span class="line"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span><br><span class="line"># NOTE: This will enable public access to the opened port</span><br><span class="line"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span><br><span class="line"></span><br><span class="line"># Create a forwarded port mapping which allows access to a specific port</span><br><span class="line"># within the machine from a port on the host machine and only allow access</span><br><span class="line"># via 127.0.0.1 to disable public access</span><br><span class="line"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;</span><br></pre></td></tr></table></figure><p>实际上设置端口转发这个功能并不实用，一个很明显的问题就是如果启动多个虚机，很容易就出现宿主机上端口冲突的问题。即使没有端口冲突，使用起来也不方便，我个人不推荐使用的，可以把这部分配置直接删掉。直接使用下面的私有网络。</p><p>这个功能是虚拟机软件提供的，可以在虚机的网卡设置中展开高级选项，找到相关的配置：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic1.zhimg.com/80/v2-4d1b277ecb3544b2b438b98388fea778_1440w.jpg" alt="img"></p><p>还有个地方需要注意，默认的 SSH 端口映射在这里没法直接修改。比如像我这样，2222 端口出现莫名问题，如果想要把 22 端口转发到其它端口如 22222，直接添加下面这样的配置是<strong>没用</strong>的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;forwarded_port&quot;, guest: 22, host: 22222</span><br></pre></td></tr></table></figure><p>它会在原来的基础上新加一个端口转发规则，而不是替代原来的，必须要先强制关闭掉默认的那条规则:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;forwarded_port&quot;, guest: 22, host: 2222, id: &quot;ssh&quot;, disabled: &quot;true&quot;</span><br><span class="line">config.vm.network &quot;forwarded_port&quot;, guest: 22, host: 22222</span><br></pre></td></tr></table></figure><h3 id="配置私有网络"><a href="#配置私有网络" class="headerlink" title="配置私有网络"></a>配置私有网络</h3><p>下面这段配置用来配置私有网络，实际上对应的是 VirtualBox 的主机网络，也就是 HostOnly 网络。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Create a private network, which allows host-only access to the machine</span><br><span class="line"># using a specific IP.</span><br><span class="line"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span><br></pre></td></tr></table></figure><p>取消注释最下面一行，就可以为虚机设置指定的私有网络地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span><br></pre></td></tr></table></figure><p>如果这个网段的主机网络在 VirtualBox 中不存在，Vagrant 会在启动虚机时自动创建。所以，如果你想要利用已有的网络，请查看现有<strong>主机网络</strong>配置：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic3.zhimg.com/80/v2-a7962b522cc5584e95340f0aee31e902_1440w.jpg" alt="img"></p><p>最好这个网络也不要启用 DHCP，完全由自己来分配地址，这样更加清楚。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot;</span><br></pre></td></tr></table></figure><p>修改完成后，执行 <code>vagrant reload</code> 命令重建虚机，就能看到多出来的网卡了。</p><p>私有网络实际也可以直接使用 DHCP，但是并不推荐：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, type: &quot;dhcp&quot;</span><br></pre></td></tr></table></figure><h3 id="配置公共网络"><a href="#配置公共网络" class="headerlink" title="配置公共网络"></a>配置公共网络</h3><p>下面这条配置用来配置公共网络：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Create a public network, which generally matched to bridged network.</span><br><span class="line"># Bridged networks make the machine appear as another physical device on</span><br><span class="line"># your network.</span><br><span class="line"># config.vm.network &quot;public_network&quot;</span><br></pre></td></tr></table></figure><p>正如注释所说，这里通常对应的就是桥接网络。实际开发场景下，我们极少会需要把虚机暴露到公共网络上，这样既不安全，也没有必要。</p><p>默认所起的第 1 个 NAT 网络已经保证了虚机可以上互联网，而私有网络保证了宿主机和虚机，以及虚机和虚机之间的通信。如果有对外暴露服务的需求，还可以使用端口转发。我实在想不出什么情况下是必须要用桥接网络的。</p><p>所以这部分配置可以直接删除，如确有使用的，可以参考 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/networking/public_network.html">官方文档</a>。</p><h3 id="配置同步文件夹"><a href="#配置同步文件夹" class="headerlink" title="配置同步文件夹"></a>配置同步文件夹</h3><p>下面的配置项用来配置同步文件夹:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Share an additional folder to the guest VM. The first argument is</span><br><span class="line"># the path on the host to the actual folder. The second argument is</span><br><span class="line"># the path on the guest to mount the folder. And the optional third</span><br><span class="line"># argument is a set of non-required options.</span><br><span class="line"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br></pre></td></tr></table></figure><p>在启动虚机的时候，我们可以看到这样的提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">==&gt; default: Machine booted and ready!</span><br><span class="line">==&gt; default: Checking for guest additions in VM...</span><br><span class="line">    default: No guest additions were detected on the base box for this VM! Guest</span><br><span class="line">    default: additions are required for forwarded ports, shared folders, host only</span><br><span class="line">    default: networking, and more. If SSH fails on this machine, please install</span><br><span class="line">    default: the guest additions and repackage the box to continue.</span><br><span class="line">    default:</span><br><span class="line">    default: This is not an error message; everything may continue to work properly,</span><br><span class="line">    default: in which case you may ignore this message.</span><br><span class="line">==&gt; default: Configuring and enabling network interfaces...</span><br><span class="line">==&gt; default: Rsyncing folder: /cygdrive/c/Users/Davy/demo/ =&gt; /vagrant</span><br></pre></td></tr></table></figure><p>先注意最后一行的提示：<code>Rsyncing folder: /cygdrive/c/Users/Davy/demo/ =&gt; /vagrant</code></p><ul><li><code>/cygdrive/c/Users/Davy/demo/</code> 这是宿主机的本地目录，也就是 <code>Vagrantfile</code> 所在的目录。</li><li><code>/vagrant</code> 是虚拟机内部的路径</li><li><code>Rsyncing</code> 表示同步的方式是 Rsync</li></ul><blockquote><p>宿主机目录中出现 <code>/cygdrive</code> 是因为 Vagrant 程序用到了 Cygwin，它是在 Windows 系统中兼容 Linux/POSIX 的模拟层。可以把 <code>/cygdrive</code> 看成是虚拟的根目录。</p></blockquote><p>这是 Vagrant 默认的同步文件夹设置，别忘了 Vagrant 的作用是用来搭建开发环境的。所以它假定了当前目录是我们的开发项目所在目录，自动把本地的项目目录同步到虚机中，就可以快速的开始开发调试工作了。</p><ol><li>在 <code>demo</code> 目录下创建一些文件，例如 <code>hello.py</code></li><li>执行 <code>vagrant reload</code>，重启虚机</li><li>在虚机启动完成后登录到虚机内，操作如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br><span class="line">Last login: Sat May  2 16:25:00 2020 from 10.0.2.2</span><br><span class="line">[vagrant@localhost ~]$ cd /vagrant/</span><br><span class="line">[vagrant@localhost vagrant]$ ls</span><br><span class="line">hello.py  Vagrantfile</span><br><span class="line">[vagrant@localhost vagrant]$ python hello.py</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><p>这种同步方式在大多数情况下都能提供便利，不过也有不足之处：</p><ul><li>同步是一次性的，即只有启动虚机的时候执行，也就是说改了代码必须要重启一次虚机</li><li>单向的，即只能从宿主机同步到虚拟机，也就是说在虚机内的改动不会同步到外面</li><li>需要拷贝文件，如果要同步的文件数量较多，会占用更多的磁盘空间</li></ul><p>让我们按照默认配置的提示来新加一条同步文件夹配置试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br></pre></td></tr></table></figure><p>注意，别忘了先在宿主机上创建 <code>data</code> 文件夹，重启虚机可能看到下面的错误提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">==&gt; default: Rsyncing folder: /cygdrive/c/Users/Davy/demo/ =&gt; /vagrant</span><br><span class="line">==&gt; default: Mounting shared folders...</span><br><span class="line">    default: /vagrant_data =&gt; C:/Users/Davy/data</span><br><span class="line">Vagrant was unable to mount VirtualBox shared folders. This is usually</span><br><span class="line">because the filesystem &quot;vboxsf&quot; is not available. This filesystem is</span><br><span class="line">made available via the VirtualBox Guest Additions and kernel module.</span><br><span class="line">Please verify that these guest additions are properly installed in the</span><br><span class="line">guest. This is not a bug in Vagrant and is usually caused by a faulty</span><br><span class="line">Vagrant box. For context, the command attempted was:</span><br><span class="line"></span><br><span class="line">mount -t vboxsf -o uid=1000,gid=1000 vagrant_data /vagrant_data</span><br><span class="line"></span><br><span class="line">The error output from the command was:</span><br><span class="line"></span><br><span class="line">mount: unknown filesystem type &#x27;vboxsf&#x27;</span><br></pre></td></tr></table></figure><p>这是因为 Vagrant 提供了多种同步方式，在使用 VirtualBox 的时候，缺省同步类型是 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/synced-folders/virtualbox.html">vboxsf 挂载文件系统</a>，它需要在虚拟机内部安装客户机增强包，也就是 <code>VirtualBox Guest Additions</code>（输出信息中也提示了）。</p><p>如何在虚机系统中安装 <code>guest additions</code> 要分操作系统而定，有点小坑，后面会细说，现在修改一下配置，明确指定同步类型是 <code>rsync</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;, type: &quot;rsync&quot;</span><br></pre></td></tr></table></figure><p>这样表示仍然使用 <code>rsync</code> 来单向同步。</p><h3 id="更改虚机规格"><a href="#更改虚机规格" class="headerlink" title="更改虚机规格"></a>更改虚机规格</h3><p>VirtualBox 等虚拟机软件在 Vagrant 中被称为 Provider，虚机的规格等配置是和 Provider 相关的。因为 VirtualBox 用的最多，所以默认的配置提示是以 VirtualBox 举例。</p><p>如果想要了解其它 Provider 的配置，请参考 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/providers/">文档</a></p><p>把中间那一段取消注释，其它的可以删掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Provider-specific configuration so you can fine-tune various</span><br><span class="line"># backing providers for Vagrant. These expose provider-specific options.</span><br><span class="line"># Example for VirtualBox:</span><br><span class="line">#</span><br><span class="line"># config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">#   # Display the VirtualBox GUI when booting the machine</span><br><span class="line">#   vb.gui = true</span><br><span class="line">#</span><br><span class="line">#   # Customize the amount of memory on the VM:</span><br><span class="line">#   vb.memory = &quot;1024&quot;</span><br><span class="line"># end</span><br><span class="line">#</span><br><span class="line"># View the documentation for the provider you are using for more</span><br><span class="line"># information on available options.</span><br></pre></td></tr></table></figure><p>使用 VSCode 时，选中它们，然后按下快捷键 <code>Ctrl + /</code> 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">  # Display the VirtualBox GUI when booting the machine</span><br><span class="line">  vb.gui = true</span><br><span class="line"></span><br><span class="line">  # Customize the amount of memory on the VM:</span><br><span class="line">  vb.memory = &quot;1024&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><code>vb.gui = true</code> 是在虚机启动时自动打开 VirtualBox 的图形界面，这对服务器来说没什么用，直接删掉。</p><p>添加 CPU 的配置，同时修改内存大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">  vb.cpus = 2</span><br><span class="line">  vb.memory = 2048</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>注意到，内存的大小单位是 MB，值是数字，默认的示例中有引号，实际也可以不加。</p><p>特别提醒一下，在 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/virtualbox/configuration.html">说明文档</a> 里给的例子，其中的变量名是 <code>v</code>，这其实是在双竖线中定义的，直接拷贝的时候要看清楚。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">  v.memory = 1024</span><br><span class="line">  v.cpus = 2</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="Provision"><a href="#Provision" class="headerlink" title="Provision"></a>Provision</h3><p>Provision 是指在虚机初次创建的时候，Vagrant 自动去执行的构造任务，比如安装软件，更新系统配置等。</p><p>因为 box 往往只提供基础的系统（虽然我们可以自定义 box，但是并不是每次都要这么做，而且这样做会丧失一部分灵活性），有些东西仍然需要在创建虚机的时候完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable provisioning with a shell script. Additional provisioners such as</span><br><span class="line"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span><br><span class="line"># documentation for more information about their specific syntax and use.</span><br><span class="line"># config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">#   apt-get update</span><br><span class="line">#   apt-get install -y apache2</span><br><span class="line"># SHELL</span><br></pre></td></tr></table></figure><p>因为这部分完全是个开放的内容，所以我们这里不过多讨论，来看一下什么情况下会触发 provision 的操作：</p><ul><li>某个环境初次执行 <code>vagrant up</code> 的时候</li><li>执行 <code>vagrant provision</code> 命令</li><li>重启的时候 <code>vagrant reload --provision</code>，带上 <code>--provision</code> 选项</li></ul><p>除了上面这些默认提示给出的配置项，Vagrantfile 还支持其它很多配置，具体请 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/vagrantfile/">查看文档</a>。</p><p>由于 Vagrantfile 本身是 Ruby 脚本，所以它并不仅仅是静态的配置文件，而且可以包含程序逻辑，例如在 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/multi-machine/">如何创建多个虚机</a> 中就有应用，有兴趣的可以自行研究。</p><h2 id="定制带客户机增强的-box"><a href="#定制带客户机增强的-box" class="headerlink" title="定制带客户机增强的 box"></a>定制带客户机增强的 box</h2><h3 id="下载-Guest-Addition"><a href="#下载-Guest-Addition" class="headerlink" title="下载 Guest Addition"></a>下载 Guest Addition</h3><p>VirtualBox 的<a href="https://link.zhihu.com/?target=https%3A//www.virtualbox.org/wiki/Downloads">下载页面</a>并没有直接给出 Guest Addtion 的下载链接，我们先在 VirtualBox 的任一下载链接上右键，复制链接地址，例如得到 <code>https://download.virtualbox.org/virtualbox/6.1.6/VirtualBox-6.1.6-137129-Win.exe</code>，去掉最后的文件名，把其中的路径 <code>https://download.virtualbox.org/virtualbox/6.1.6/</code> 在浏览器中打开，就能看到所有可下载的版本，在其中找到 <code>VBoxGuestAdditions_6.1.6.iso</code> 直接下载。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic2.zhimg.com/80/v2-6a207372c58ba6ff0bc7c8da9f5f015d_1440w.jpg" alt="img"></p><h3 id="安装-Guest-Addition"><a href="#安装-Guest-Addition" class="headerlink" title="安装 Guest Addition"></a>安装 Guest Addition</h3><p>重新使用 Vagrant 从原始的镜像启动一个干净的虚机。</p><p><code>VBoxGuestAdditions_6.1.6.iso</code> 需要以光盘的形式挂载到虚机上，但是默认启动的这个虚机是没有光驱的。添加虚拟光驱需要先将虚机关闭。</p><p>然后在 VirtualBox 界面上操作，打开 <code>设置</code>，选择 <code>存储</code>，点击 <code>添加虚拟光驱</code>，点击 <code>控制器： IDE</code>，选择 <code>VBoxGuestAdditions_6.1.6.iso</code>，点击 <code>OK</code></p><p>直接在 VirtualBox 上启动虚机，如果你在虚机菜单上选择 <code>设备</code> - <code>安装增强功能</code>，大概率是会遇到下面这样的错误，别管它，我们手动来安装。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic2.zhimg.com/80/v2-a12c3083ad70b943faaed4f822e6c7c5_1440w.jpg" alt="img"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic2.zhimg.com/80/v2-8be73777016fdb8ffc17ce6eb58e3179_1440w.jpg" alt="img"></p><p>使用 <code>vagrant/vagrant</code> 登录到虚机内，切换到 <code>root</code> 用户，查看虚拟光盘是否已经挂载上来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -i</span><br><span class="line"># lsblk</span><br><span class="line">NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0  40G  0 disk</span><br><span class="line">└─sda1   8:1    0  40G  0 part /</span><br><span class="line">sr0     11:0    1  57M  0 rom</span><br></pre></td></tr></table></figure><p>下面的 <code>sr0</code> 就是光盘设备，要把它挂载到文件系统中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/sr0 /mnt/</span><br><span class="line">mount: /dev/sr0 is write-protected, mounting read-only</span><br><span class="line"># cd /mnt/</span><br><span class="line"># ls</span><br><span class="line">AUTORUN.INF  cert  OS2           TRANS.TBL                VBoxDarwinAdditionsUninstall.tool  VBoxSolarisAdditions.pkg        VBoxWindowsAdditions.exe</span><br><span class="line">autorun.sh   NT3x  runasroot.sh  VBoxDarwinAdditions.pkg  VBoxLinuxAdditions.run             VBoxWindowsAdditions-amd64.exe  VBoxWindowsAdditions-x86.exe</span><br></pre></td></tr></table></figure><p>在 Linux 系统中要运行 <code>VBoxLinuxAdditions.run</code>，这时候直接运行仍然会报错：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic2.zhimg.com/80/v2-48cba2e05faeddc156215d4a4896e61d_1440w.jpg" alt="img"></p><p>大致意思是要它需要内核的头文件来构建。</p><p>头文件通过安装 <code>kernel-devel</code> 就可以了，但是直接安装的版本是最新版本的，可能会当前的内核版本不一致，仍然是没用的。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mnt]# uname -r</span><br><span class="line">3.10.0-1062.12.1.el7.x86_64</span><br><span class="line">[root@localhost mnt]# yum info kernel-devel</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : kernel-devel</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 3.10.0</span><br><span class="line">Release     : 1127.el7</span><br><span class="line">Size        : 38 M</span><br><span class="line">Repo        : installed</span><br><span class="line">From repo   : base</span><br></pre></td></tr></table></figure><p>这里 <code>kernel-devel</code> 的 <code>Release</code> 版本号和系统内核版本不一致，所以仍然不行。</p><p>需要先更新一把，然后再安装（也可以先安装再更新）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum update -y</span><br><span class="line"># yum install -y gcc kernel-devel</span><br></pre></td></tr></table></figure><blockquote><p>这里选择的是更新到最新版本，如果你的开发环境需要特定的内核版本，你也可以根据情况安装指定的版本，只要<strong>保证内核版本和头文件版本完全匹配</strong>。</p><p>Ubuntu 系统的安装方式有所不同，可以参考 <a href="https://link.zhihu.com/?target=https%3A//www.vagrantup.com/docs/virtualbox/boxes.html">Vagrant 的文档</a></p></blockquote><p>升级内核后需要重启虚机，然后再次尝试安装 Additions：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mnt]# ./VBoxLinuxAdditions.run</span><br><span class="line">Verifying archive integrity... All good.</span><br><span class="line">Uncompressing VirtualBox 6.1.6 Guest Additions for Linux........</span><br><span class="line">VirtualBox Guest Additions installer</span><br><span class="line">Removing installed version 6.1.6 of VirtualBox Guest Additions...</span><br><span class="line">Copying additional installer modules ...</span><br><span class="line">Installing additional modules ...</span><br><span class="line">VirtualBox Guest Additions: Starting.</span><br><span class="line">VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel</span><br><span class="line">modules.  This may take a while.</span><br><span class="line">VirtualBox Guest Additions: To build modules for other installed kernels, run</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup &lt;version&gt;</span><br><span class="line">VirtualBox Guest Additions: or</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all</span><br><span class="line">VirtualBox Guest Additions: Building the modules for kernel</span><br><span class="line">3.10.0-1127.el7.x86_64.</span><br><span class="line">VirtualBox Guest Additions: Running kernel modules will not be replaced until</span><br><span class="line">the system is restarted</span><br><span class="line"></span><br><span class="line"># 检查模块是否已经加载了</span><br><span class="line">[root@localhost mnt]# lsmod |grep vbox</span><br><span class="line">vboxvideo              35867  1</span><br><span class="line">ttm                    96673  1 vboxvideo</span><br><span class="line">drm_kms_helper        186531  1 vboxvideo</span><br><span class="line">drm                   456166  4 ttm,drm_kms_helper,vboxvideo</span><br><span class="line">vboxguest             349038  1</span><br><span class="line">[root@localhost mnt]#</span><br></pre></td></tr></table></figure><p>能够看到 <code>vboxguest</code> 就代表安装成功了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在 Vagrantfile 中添加同步文件夹设置，这次不再指定同步类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br></pre></td></tr></table></figure><p>然后执行 <code>vagrant reload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant reload</span><br><span class="line">...</span><br><span class="line">==&gt; default: Checking for guest additions in VM...</span><br><span class="line">==&gt; default: Rsyncing folder: /cygdrive/c/Users/Davy/demo/ =&gt; /vagrant</span><br><span class="line">==&gt; default: Mounting shared folders...</span><br><span class="line">    default: /vagrant_data =&gt; C:/Users/Davy/data</span><br><span class="line">==&gt; default: Machine already provisioned. Run `vagrant provision` or use the `--provision`</span><br><span class="line">==&gt; default: flag to force provisioning. Provisioners marked to run always will still run.</span><br></pre></td></tr></table></figure><p>可以看到关于 additions 的提示信息没有了，新的同步文件夹也能正常同步了，这次的同步是双向的。我们可以先去同步文件夹随便创建一个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br><span class="line">Last login: Tue May  5 12:16:39 2020 from 10.0.2.2</span><br><span class="line">[vagrant@localhost ~]$ cd /vagrant_data/</span><br><span class="line">[vagrant@localhost vagrant_data]$ ls</span><br><span class="line">data.txt</span><br><span class="line">[vagrant@localhost vagrant_data]$ touch vm.txt   # 新建一个文件</span><br><span class="line">[vagrant@localhost vagrant_data]$ ls</span><br><span class="line">data.txt  vm.txt</span><br></pre></td></tr></table></figure><p>回到 Windows 宿主机上，<code>data</code> 文件夹下面也能看到 <code>vm.txt</code> 文件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Davy@Davy-Desktop MINGW64 ~/data</span><br><span class="line">$ ls</span><br><span class="line">data.txt  vm.txt</span><br></pre></td></tr></table></figure><p>这样，我们的 Guest Addition 就安装成功了。</p><h3 id="清理磁盘"><a href="#清理磁盘" class="headerlink" title="清理磁盘"></a>清理磁盘</h3><p>接下来我们来把这个好不容易才装上了增强包的虚机保存为新的镜像。</p><blockquote><p>这里你可能还想安装点其它软件，但是作为基础镜像，最好还是保持干净一点，不宜安装太多东西。后续可以在这个基础之上，再次构建其它特定的镜像。</p></blockquote><p>为了使做出来的镜像文件大小紧凑点，我们把刚才安装过程中的缓存也删掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>我在打包过程中还遇到过 swapfile 占用磁盘空间的问题，导致镜像文件过大，可以这样检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du /swapfile   # 查看是否有占用</span><br><span class="line">swapoff -a     # 关闭 SWAP</span><br><span class="line">rm -f /swapfile</span><br></pre></td></tr></table></figure><p>使用 <code>df -h</code> 命令查看磁盘占用情况，像我这次操作，磁盘根目录不到 2GB 的空间占用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># df -h</span><br><span class="line">/dev/sda1        40G  1.5G   39G   4% /</span><br></pre></td></tr></table></figure><h3 id="打包为-box"><a href="#打包为-box" class="headerlink" title="打包为 box"></a>打包为 box</h3><p>执行 <code>vagrant package</code> 就可以把当前环境打包生成新的 box 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant  package</span><br><span class="line">    ==&gt; default: Attempting graceful shutdown of VM...</span><br><span class="line">==&gt; default: Clearing any previously set forwarded ports...</span><br><span class="line">==&gt; default: Exporting VM...</span><br><span class="line">==&gt; default: Compressing package to: C:/Users/Davy/demo/package.box</span><br></pre></td></tr></table></figure><p>生成的文件就在 Dockerfile 所在的目录，文件名默认是 <code>package.box</code>。大小不到 600MB。</p><p><strong>注意：</strong>，因为默认启动虚机时本地目录会 rsync 到虚机中，<code>package.box</code> 文件也会同步（拷贝）到虚机中，占用虚机磁盘。这时候如果二次执行打包，生成的文件大小会翻倍。</p><h3 id="添加到-vagrant-中"><a href="#添加到-vagrant-中" class="headerlink" title="添加到 vagrant 中"></a>添加到 vagrant 中</h3><p>继续使用下面的命令把新建的 box 添加到 vagrant 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add package.box --name davy/centos-7-base</span><br></pre></td></tr></table></figure><p>为了区分这是个人创建的基础镜像，加了个人用户名作为前缀，同时加了 <code>base</code> 后缀。</p><p>添加成功后，本地的 <code>package.box</code> 就可以删除了。</p><p>后续再创建虚机，使用下面的命令就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init davy/centos-7-base</span><br></pre></td></tr></table></figure><h2 id="使用-SSH-客户端"><a href="#使用-SSH-客户端" class="headerlink" title="使用 SSH 客户端"></a>使用 SSH 客户端</h2><p><code>vagrant ssh</code> 命令虽然很方便，但是在 Windows 环境下，因为默认的命令行终端不太好用，所以往往还需要使用更专业的 SSH 客户端例如 XShell 或 SecureCRT。</p><p>默认的镜像只支持 private_key 的方式登录，<code>vagrant/vagrant</code> 可以在 VirtualBox 上登录系统，但是如果用来登录 SSH，会被拒绝。</p><p>当然你可以在制作镜像的时候修改 ssh 服务的配置，让它能够用密码登录，但是实际上用密钥更加方便。</p><p>先使用 <code>vagrant ssh-config</code> 命令可以看到 SSH 的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh-config</span><br><span class="line">Host default</span><br><span class="line">  HostName 127.0.0.1</span><br><span class="line">  User vagrant</span><br><span class="line">  Port 22222</span><br><span class="line">  UserKnownHostsFile /dev/null</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">  PasswordAuthentication no</span><br><span class="line">  IdentityFile E:/VirtualBox/.vagrant.d/boxes/davy-VAGRANTSLASH-centos-7-base/0/virtualbox/vagrant_private_key</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  LogLevel FATAL</span><br></pre></td></tr></table></figure><p>可以看到其中的 <code>IdentityFile</code> 就是私钥文件。</p><p>发现这个自定义 box 启动的虚机的密钥文件是固定在 <code>VAGRANT_HOME</code> 下的相关目录下。那么就好办了，直接在 SSH 客户端软件上导入这个私钥文件就可以了。</p><p>以 SecureCRT 为例：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://pic1.zhimg.com/80/v2-26a045d8d3ae2db9f3f90e55050cfc9c_1440w.jpg" alt="img"></p><h2 id="使用模板文件"><a href="#使用模板文件" class="headerlink" title="使用模板文件"></a>使用模板文件</h2><p><code>vagrant init</code> 命令只是用来生成 Vagrantfile 文件，但是默认的配置选项每次都要修改也很麻烦。该命令提供了 <code>--template</code> 选项，可以指定一个模板文件，我们可以在自定义自己的模板文件。</p><p>这个模板文件的格式 <code>ERB</code> 是 <code>Ruby</code> 的模板语法，如果有 <code>Ruby on Rails</code> 开发经验的可能会比较熟悉。但是我们不用去学习这些细节。</p><p>可以从 <a href="https://link.zhihu.com/?target=https%3A//github.com/hashicorp/vagrant/blob/master/templates/commands/init/Vagrantfile.erb">这里</a> 拷贝一份原文件，还能在 Vagrant 的安装位置 <code>Vagrant\embedded\gems\2.2.7\gems\vagrant-2.2.7\templates\commands\init</code> 底下找到，并且有一个 <code>Vagrantfile.min.erb</code> 是去掉所有注释的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;&lt;%= box_name %&gt;&quot;</span><br><span class="line">  &lt;% if box_version -%&gt;</span><br><span class="line">  config.vm.box_version = &quot;&lt;%= box_version %&gt;&quot;</span><br><span class="line">  &lt;% end -%&gt;</span><br><span class="line">  &lt;% if box_url -%&gt;</span><br><span class="line">  config.vm.box_url = &quot;&lt;%= box_url %&gt;&quot;</span><br><span class="line">  &lt;% end -%&gt;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>可以看到其中是怎么配置 <code>config.vm.box</code> 的。 像 <code>&lt;%</code> 这样的语法有兴趣可以自己去了解，这里我们只要把自己想要的配置项原样写上去就行了。</p><p>下面是我按照自己的需要写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;&lt;%= box_name %&gt;&quot;</span><br><span class="line">  config.vm.network &quot;forwarded_port&quot;, guest: 22, host: 2222, id: &quot;ssh&quot;, disabled: &quot;true&quot;</span><br><span class="line">  config.vm.network &quot;forwarded_port&quot;, guest: 22, host: 22222</span><br><span class="line"></span><br><span class="line">  # config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot;</span><br><span class="line">  # config.vm.synced_folder &quot;../data&quot;, &quot;/data&quot;</span><br><span class="line"></span><br><span class="line">  config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">    # vb.name = &quot;give me a better name&quot;</span><br><span class="line">    vb.memory = &quot;1024&quot;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><blockquote><p>不要有中文，不然会遇到编码的麻烦。</p></blockquote><p>其中像私有网络和同步文件夹配置，几乎每次基本都要，但是又不好固定，所以仍然以注释的形式保留，每次稍微改一下也很方便。</p><p>把这个文件找个目录，保存为 <code>vagrant.erb</code>。</p><p>接着在使用 <code>vagrant init</code> 的时候通过 <code>--tempate</code> 指定它就可以了，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init davy/centos-7-base --tempate &quot;C:\Users\Davy\vagrant.erb&quot;</span><br></pre></td></tr></table></figure><p>显然，每次要记住并且输入这个模板文件也很麻烦的。可以通过设置环境变量 <code>VAGRANT_DEFAULT_TEMPLATE</code> 来一劳永逸地解决这个问题。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>费了莫大的力气，终于可以比较愉快地玩耍了。虽然也只是刚把基础镜像搞定了，后面可能还要针对不同用途的环境编写更加复杂的 Vagrantfile。</p><p>现在很多人刚认识到 Vagrant 之后都会问，<a href="https://www.zhihu.com/question/32324376">Vagrant 和 Docker 的区别是什么？</a></p><p>在容器流行之前，Vagrant 就是用来编排虚机和自动部署开发环境的，有了 Docker/Kubernetes 之后，直接用容器来编排应用确实更香。但是还有一些工作，例如容器平台自身的安装，多节点集群的部署测试等，更方便用虚机解决。</p><p>此外，现在 Windows 中还可以通过 WSL 使用 Linux 系统，但是使用场景上还是有所不同。Vagrant 更多地用于快速搭建可重用的开发环境，从这个角度看，Vagrant 其实好比 IaaS 云平台，只不过规模局限在个人电脑上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转载&lt;a href=&quot;https://zhuanlan.zhihu.com/p/259833884&quot;&gt;https://zhuanlan.zhihu.com/p/259833884&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭建 Linu
      
    
    </summary>
    
    
      <category term="vagrant" scheme="https://www.codekylin.cn/categories/vagrant/"/>
    
    
      <category term="vagrant" scheme="https://www.codekylin.cn/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>Docker监控CIG</title>
    <link href="https://www.codekylin.cn/45434.html"/>
    <id>https://www.codekylin.cn/45434.html</id>
    <published>2022-01-29T11:54:55.000Z</published>
    <updated>2022-01-29T12:05:44.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>通过<code>docker stats</code>命令可以很方便的看到当前宿主机上所有容器的CPU,内存以及网络流量等数据，一般小公司够用了。。。。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129120035131.png" alt="image-20220129120035131"></p><p>但是，docker stats统计结果只能是当前宿主机的全部容器，数据资料是实时的，没有地方存储、没有健康指标过线预警等功能</p><h3 id="CAdvisor"><a href="#CAdvisor" class="headerlink" title="CAdvisor"></a>CAdvisor</h3><p>CAdvisor是一个容器资源监控工具，包括容器的内存，CPU，网络IO，磁盘IO等监控，同时提供了一个WEB页面用于查看容器的实时运行状态。CAdvisor默认存储2分钟的数据，而且只是针对单物理机。不过，CAdvisor提供了很多数据集成接口，支持InfluxDB，Redis，Kafka，Elasticsearch等集成，可以加上对应配置将监控数据发往这些数据库存储起来。</p><p>功能主要有两点：</p><ul><li>展示Host和容器两个层次的监控数据</li><li>展示历史变化数据</li></ul><h3 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h3><p>InfluxDB是一种时序数据库，用来存放监控数据。InfluxDB 是用Go语言编写的一个开源分布式时序、事件和指标数据库，无需外部依赖。</p><p>CAdvisor默认只在本机保存最近2分钟的数据，为了持久化存储数据和统一收集展示监控数据，需要将数据存储到InfluxDB中。InfluxDB是一个时序数据库，专门用于存储时序相关数据，很适合存储CAdvisor的数据。而且，CAdvisor本身已经提供了InfluxDB的集成方法，在启动容器时指定配置即可。</p><h3 id="Granfana"><a href="#Granfana" class="headerlink" title="Granfana"></a>Granfana</h3><p>Grafana是一个开源的数据监控分析可视化平台，支持多种数据源配置（如InfluxDB，MySQL，Elasticserach，OpenTSDB，Graphite等）和丰富的插件及模板功能，支持图表权限控制和报警。</p><p>Grafana主要特点</p><ul><li>灵活丰富的图形化选项</li><li>可以混合多种风格</li><li>支持白天和夜间模式</li><li>多数据源</li></ul><p><strong>其主要特色功能</strong></p><p>1）基于时间序列，支持与时间有关的相关函数（如最大，最小，求和等）</p><p>2）可度量性：你可以实时对大量数据进行计算</p><p>3）基于事件：它支持任意的事件数据</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD-16434288751195.png" alt="下载"></p><ul><li>CAdvisor监控收集</li><li>InfluxDB存储数据</li><li>Granfana展示图表</li></ul><ol><li>CAdvisor负责收集容器随时间变化的数据</li><li>InfluxDB负责存储时序数据</li><li>Grafana负责分析和展示时序数据</li></ol><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>使用compose，在<code>/mydocker</code>创建一个新目录<code>mkdir cig</code></p><p>编写<code>docker-compose.yml</code>文件，<code>docker-compose config -q</code>检查是否有语法错误</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">grafana_data:</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">influxdb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tutum/influxdb:0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PRE_CREATE_DB=cadvisor</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8083:8083&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8086:8086&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/influxdb:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cadvisor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb:influxsrv</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-storage_driver=influxdb</span> <span class="string">-storage_driver_db=cadvisor</span> <span class="string">-storage_driver_host=influxsrv:8086</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys/fs/cgroup/cpu,cpuacct:/sys/fs/cgroup/cpuacct,cpu</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;104&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;104&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb:influxsrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">grafana_data:/var/lib/grafana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTP_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTP_PASS=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_HOST=influxsrv</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_PORT=8086</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_NAME=cadvisor</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_PASS=root</span></span><br></pre></td></tr></table></figure><p>没有错误后<code>docker-compose up</code>启动运行</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129122519341.png" alt="image-20220129122519341"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129122711740.png" alt="image-20220129122711740"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129122916574.png" alt="image-20220129122916574"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129123009063.png" alt="image-20220129123009063"></p><p>默认账户密码<code>admin</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129123056951.png" alt="image-20220129123056951"></p><p>可以将这些没用的全部给<code>remove</code></p><p>配置数据源，选择<code>influxdb</code>数据源</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129155520194.png" alt="image-20220129155520194"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129155738674.png" alt="image-20220129155738674"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129161520085.png" alt="image-20220129161520085"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129161538029.png" alt="image-20220129161538029"></p><p>选择数据库，填写密码。（docker-compose.yaml中配置好的）</p><p>配置面板panel</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129161706705.png" alt="image-20220129161706705"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129161757328.png" alt="image-20220129161757328"></p><p>选择图表展现方式</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129161837568.png" alt="image-20220129161837568"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129162040911.png" alt="image-20220129162040911"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129162128255.png" alt="image-20220129162128255"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129162536102.png" alt="image-20220129162536102"></p><p>到这里完成~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;通过&lt;code&gt;docker stats&lt;/code&gt;命令可以很方便的看到当前宿主机上所有容器的CPU,内存以及网络流量等数据，一般小公司够
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
      <category term="CIG" scheme="https://www.codekylin.cn/categories/Docker/CIG/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker轻量级可视化工具Portainer</title>
    <link href="https://www.codekylin.cn/41839.html"/>
    <id>https://www.codekylin.cn/41839.html</id>
    <published>2022-01-29T11:53:31.000Z</published>
    <updated>2022-01-29T12:05:44.930Z</updated>
    
    <content type="html"><![CDATA[<p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。</p><p><a href="https://www.portainer.io/">https://www.portainer.io/</a></p><p>命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name portainer     --restart=always     -v /var/run/docker.sock:/var/run/docker.sock     -v portainer_data:/data     portainer/portainer</span><br></pre></td></tr></table></figure><p><code>--restart=always</code>就是docker只要一启动该容器就会运行</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210909145148668.png" alt="image-20210909145148668"></p><p>创建用户，设置密码</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210909145542127.png" alt="image-20210909145542127"></p><p>选择<code>Local</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210909145819964.png" alt="image-20210909145819964"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210909145845114.png" alt="image-20210909145845114"></p><p>可视化面板。</p><ul><li>stack代表compose</li><li>containers代表容器</li><li>images代表镜像</li><li>volumes代表容器卷</li><li>network代表网络配置</li></ul><p>其他的看着就应该懂了 。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.portainer.io/&quot;&gt;https://www.portainer.io/&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
      <category term="Portainer" scheme="https://www.codekylin.cn/tags/Portainer/"/>
    
  </entry>
  
  <entry>
    <title>Docker-compose容器编排</title>
    <link href="https://www.codekylin.cn/7991.html"/>
    <id>https://www.codekylin.cn/7991.html</id>
    <published>2022-01-29T11:47:36.000Z</published>
    <updated>2022-01-29T12:05:44.932Z</updated>
    
    <content type="html"><![CDATA[<p>Compose 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器组成一个应用。你需要定义一个 YAML 格式的配置文件docker-compose.yml，<strong>写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。</strong>负责实现对Dokcer容器集群的快速编排。</p><p>docker建议我们每一个容器中只运行一个服务,因为docker容器本身占用资源极少,所以最好是将每个服务单独的分割开来但是这样我们又面临了一个问题？</p><p>如果我需要同时部署好多个服务,难道要每个服务单独写Dockerfile然后在构建镜像,构建容器,这样累都累死了,所以docker官方给我们提供了docker-compose多服务部署的工具</p><p>例如要实现一个Web微服务项目，除了Web服务容器本身，往往还需要再加上后端的数据库mysql服务容器，redis服务器，注册中心eureka，甚至还包括负载均衡容器等等。。。。。。</p><p>Compose允许用户通过一个单独的<code>docker-compose.yml</code>模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose 解决了容器与容器之间如何管理编排的问题。</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Documentation</a></p><p><a href="https://docs.docker.com/compose/install/">Install Docker Compose | Docker Documentation</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载安装（多试几次）</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>docker-compose -h</td><td>查看帮助</td></tr><tr><td>docker-compose up</td><td>启动所有docker-compose服务</td></tr><tr><td>docker-compose up -d</td><td>启动所有docker-compose服务并后台运行</td></tr><tr><td>docker-compose down</td><td>停止并删除容器、网络、卷、镜像。</td></tr><tr><td>docker-compose exec  yml里面的服务id</td><td>进入容器实例内部 docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</td></tr><tr><td>docker-compose ps</td><td>展示当前docker-compose编排过的运行的所有容器</td></tr><tr><td>docker-compose top</td><td>展示当前docker-compose编排过的容器进程</td></tr><tr><td>docker-compose logs  yml里面的服务id</td><td>查看容器输出日志</td></tr><tr><td>dokcer-compose config</td><td>检查配置</td></tr><tr><td>dokcer-compose config -q</td><td>检查配置，有问题才有输出</td></tr><tr><td>docker-compose restart</td><td>重启服务</td></tr><tr><td>docker-compose start</td><td>启动服务</td></tr><tr><td>docker-compose stop</td><td>停止服务</td></tr></tbody></table><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用docker-compose.yml定义一个完整业务单元，安排好整体应用中的各个容器服务</li><li>执行<code>docker-compose up</code>命令来启动并运行整个应用程序，完成一键部署上线。</li></ol><h3 id="改造微服务项目"><a href="#改造微服务项目" class="headerlink" title="改造微服务项目"></a>改造微服务项目</h3><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">6001</span></span><br><span class="line"><span class="comment"># ========================alibaba.druid相关配置=====================</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://ip:3306/db2021?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-while-idle</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># ========================redis相关配置=====================</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">ip</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># ========================mybatis相关配置===================</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.kylin.docker_boot.entity</span></span><br><span class="line"><span class="comment"># ========================swagger=====================</span></span><br><span class="line"><span class="meta">spring.swagger2.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper.version</span>&gt;</span>4.1.5<span class="tag">&lt;/<span class="name">mapper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--guava Google 开源的 Guava 中自带的布隆过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redisson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot通用依赖模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--swagger2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot与Redis整合依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springCache--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springCache连接池依赖包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jedis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mysql数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot集成druid连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和springboot整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加springboot对amqp的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通用基础配置junit/devtools/test/log4j/lombok/hutool--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hutool--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--persistence--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通用Mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>RedisConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lettuceConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * redis序列化的工具配置类，下面这个请一定开启配置</span></span><br><span class="line"><span class="comment">     * 127.0.0.1:6379&gt; keys *</span></span><br><span class="line"><span class="comment">     * 1) &quot;ord:102&quot;  序列化过</span></span><br><span class="line"><span class="comment">     * 2) &quot;\xac\xed\x00\x05t\x00\aord:102&quot;   野生，没有序列化过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Serializable&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        <span class="comment">//设置key序列化方式string</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式json</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line"></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SwaggerConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.swagger2.enabled&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(enabled)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kylin.docker_boot&quot;</span>)) <span class="comment">//你自己的package</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;尚硅谷Java大厂技术&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="keyword">new</span> Date()))</span><br><span class="line">                .description(<span class="string">&quot;docker-compose&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://www.atguigu.com/&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="entitiy"><a href="#entitiy" class="headerlink" title="entitiy"></a>entitiy</h4><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = &quot;JDBC&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别 0=女 1=男 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Byte sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Byte deleted;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;update_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username - 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> password - 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取性别 0=女 1=男 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sex - 性别 0=女 1=男 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置性别 0=女 1=男 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sex 性别 0=女 1=男 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Byte sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> deleted - 删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getDeleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deleted 删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeleted</span><span class="params">(Byte deleted)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deleted = deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取更新时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> update_time - 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置更新时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateTime 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取创建时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> create_time - 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置创建时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createTime 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;用户信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;性别 0=女 1=男 &quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Byte sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;删除标志，默认0不删除，1删除&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Byte deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username - 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> password - 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取性别 0=女 1=男</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sex - 性别 0=女 1=男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置性别 0=女 1=男</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sex 性别 0=女 1=男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Byte sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> deleted - 删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getDeleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deleted 删除标志，默认0不删除，1删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeleted</span><span class="params">(Byte deleted)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deleted = deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取更新时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> update_time - 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置更新时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateTime 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取创建时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> create_time - 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置创建时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createTime 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><p>UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.docker.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.docker.entities.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      WARNING - @mbg.generated</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TINYINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;deleted&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TINYINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deleted&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_KEY_USER = <span class="string">&quot;user:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * addUser</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1 先插入mysql并成功</span></span><br><span class="line">        <span class="keyword">int</span> i = userMapper.insertSelective(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//2 需要再次查询一下mysql将数据捞回来并ok</span></span><br><span class="line">            user = userMapper.selectByPrimaryKey(user.getId());</span><br><span class="line">            <span class="comment">//3 将捞出来的user存进redis，完成新增功能的数据一致性。</span></span><br><span class="line">            String key = CACHE_KEY_USER+user.getId();</span><br><span class="line">            redisTemplate.opsForValue().set(key,user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * findUserById</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        String key = CACHE_KEY_USER+id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql</span></span><br><span class="line">        user = (User) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//2 redis里面无，继续查询mysql</span></span><br><span class="line">            user = userMapper.selectByPrimaryKey(id);</span><br><span class="line">            <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//3.1 redis+mysql 都无数据</span></span><br><span class="line">                <span class="comment">//你具体细化，防止多次穿透，我们规定，记录下导致穿透的这个key回写redis</span></span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//3.2 mysql有，需要将数据写回redis，保证下一次的缓存命中率</span></span><br><span class="line">                redisTemplate.opsForValue().set(key,user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(description = &quot;用户User接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;数据库新增3条记录&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/add&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">            user.setUsername(<span class="string">&quot;zzyy&quot;</span>+i);</span><br><span class="line">            user.setPassword(IdUtil.simpleUUID().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">            user.setSex((<span class="keyword">byte</span>) <span class="keyword">new</span> Random().nextInt(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            userService.addUser(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除1条记录&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/delete/&#123;id&#125;&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        userService.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改1条记录&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/update&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        BeanUtils.copyProperties(userDTO,user);</span><br><span class="line">        userService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询1条记录&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/find/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUserById2(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样将其打成jar包，传输到服务器的<code>/mydocker</code>目录中</p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>在<code>/mydocker</code>中运行<code>docker build -t kylin_docker:1.6 .</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129103029761.png" alt="image-20220129103029761"></p><h3 id="不使用compose"><a href="#不使用compose" class="headerlink" title="不使用compose"></a>不使用compose</h3><h4 id="创建MySQL容器"><a href="#创建MySQL容器" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h4><p>首先我们要在Docker中运行MySQL容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql57 --privileged=<span class="literal">true</span> -v /kylinuse/mysql/conf:/etc/mysql/conf.d -v /kylinuse/mysql/logs:/logs -v /kylinuse/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>接着使用<code>docker exce -it mysql57 /bin/bash</code>进入容器中</p><p>接着使用<code>mysql -u root -p</code>输入密码进入mysql</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129102120990.png" alt="image-20220129102120990"></p><p><code>create database db2021;</code>创建库</p><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">use db2021;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `sex` TINYINT(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别 0=女 1=男 &#x27;</span>,</span><br><span class="line">  `deleted` TINYINT(<span class="number">4</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标志，默认0不删除，1删除&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129102320269.png" alt="image-20220129102320269"></p><h4 id="创建Redis容器"><a href="#创建Redis容器" class="headerlink" title="创建Redis容器"></a>创建Redis容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p 6379:6379 --name redis608 --privileged=<span class="literal">true</span> -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>使用<code>docker exec -it redis608 /bin/bash</code>进入容器</p><p>使用<code>redis-cli</code>连接redis服务</p><p>使用<code>keys *</code>查看数据</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129102723760.png" alt="image-20220129102723760"></p><h4 id="运行微服务镜像"><a href="#运行微服务镜像" class="headerlink" title="运行微服务镜像"></a>运行微服务镜像</h4><p><code>docker run -d -p 6001:6001 kylin_docker:1.6</code></p><p>访问<code>ip:6001/swagger-ui.html</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129103401575.png" alt="image-20220129103401575"></p><p>接着我们可以看数据库，Redis是否插入成功</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129110804891.png" alt="image-20220129110804891"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129110827191.png" alt="image-20220129110827191"></p><p>成功访问，但是还是存在一些问题</p><ol><li>先后顺序要求固定，先mysql+redis才能微服务访问成功</li><li>要运行多个run命令</li><li>容器间的启停或宕机，有可能导致ip地址对应的容器实例变化，映射出错，要么生产IP写死（不推荐），要么通过服务调用。</li></ol><h3 id="使用compose"><a href="#使用compose" class="headerlink" title="使用compose"></a>使用compose</h3><p>编写<code>docker-compose.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#compose版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="comment">#声明服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="comment">#服务名(自定义)</span></span><br><span class="line">  <span class="attr">microService:</span></span><br><span class="line">  <span class="comment">#镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kylin_docker:1.6</span></span><br><span class="line">    <span class="comment">#容器名</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ms01</span></span><br><span class="line">    <span class="comment">#端口号</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6001:6001&quot;</span></span><br><span class="line">    <span class="comment">#数据卷</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/microService:/data</span></span><br><span class="line">    <span class="comment">#网络配置</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">kylin_net</span> </span><br><span class="line">    <span class="comment">#依赖服务</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="comment">#声明redis服务</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.0.8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/redis/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/redis/data:/data</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">kylin_net</span></span><br><span class="line">    <span class="comment">#运行命令</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">  <span class="comment">#声明mysql服务</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="comment">#环境变量</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class="string">&#x27;no&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">&#x27;db2021&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">&#x27;kylin&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">&#x27;kylin123&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">/app/mysql/db:/var/lib/mysql</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">/app/mysql/conf/my.cnf:/etc/my.cnf</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">/app/mysql/init:/docker-entrypoint-initdb.d</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kylin_net</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="comment">#解决外部无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义网络</span></span><br><span class="line"><span class="attr">networks:</span> </span><br><span class="line">   <span class="attr">kylin_net:</span> </span><br></pre></td></tr></table></figure><p><code>docker-compose config -q</code>检查是否有语法错误</p><p>修改项目的配置文件，采用服务名访问</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">6001</span></span><br><span class="line"><span class="comment"># ========================alibaba.druid相关配置=====================</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://mysql:3306/db2021?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-while-idle</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># ========================redis相关配置=====================</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">redis</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># ========================mybatis相关配置===================</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.kylin.docker_boot.entity</span></span><br><span class="line"><span class="comment"># ========================swagger=====================</span></span><br><span class="line"><span class="meta">spring.swagger2.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>接着上传到服务器<code>/mydocker</code>目录下，<code>docker build -t kylin_docker:1.6 .</code>构建镜像</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129112017114.png" alt="image-20220129112017114"></p><p>使用<code>docker-compose up -d</code>可以看见启动了三个容器，同时可以看到mysql，redis我们没有给容器命名，采用的是<code>所在目录_服务名_序列号</code>的命名方式</p><ul><li>mydocker_redis_1</li><li>mydocker_mysql_1</li></ul><p><code>docker network ls</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129112230339.png" alt="image-20220129112230339"></p><p>网桥命名则会加上<code>所在目录_</code>为前缀</p><p>接着同样进入<code>msyql</code>容器创建库，表。进入swagger发送请求，运行成功！</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129112648079.png" alt="image-20220129112648079"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129112723226.png" alt="image-20220129112723226"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Compose 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器组成一个应用。你需要定义一个 YAML 格式的配置文件docker-compose.yml，&lt;strong&gt;写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
      <category term="compose" scheme="https://www.codekylin.cn/categories/Docker/compose/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络</title>
    <link href="https://www.codekylin.cn/59415.html"/>
    <id>https://www.codekylin.cn/59415.html</id>
    <published>2022-01-29T11:40:07.000Z</published>
    <updated>2022-01-29T12:05:44.928Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128172847097.png" alt="image-20220128172847097"></p><p><code>docker network ls</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128172911644.png" alt="image-20220128172911644"></p><p>默认创建三大网络模式</p><ol><li>bridge</li><li>host</li><li>none</li></ol><blockquote><p>作用</p></blockquote><ol><li>容器间的互联和通信以及端口映射</li><li>容器IP变动时候可以通过服务名直接进行网络通信而不受影响（容器启动停止后容器的IP地址是动态的）</li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>创建网络<code>docker create network 网络名字</code></p></li><li><p>查看网络 <code>docker network ls</code></p></li><li><p>查看网络源数据 <code>docker network inspect 网络名字</code></p></li><li><p>删除网络<code>docker network rm 网络名字</code></p></li></ul><h3 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h3><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为<code>docker0</code>，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p><p>查看 bridge 网络的详细信息，并通过 grep 获取名称项</p><p><code>docker network inspect bridge | grep name</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128201846923.png" alt="image-20220128201846923"></p><p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0),Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</p><p>docker run 的时候，没有指定network的话默认使用的网桥模式就是bridge，使用的就是docker0。在宿主机ifconfig,就可以看到docker0和自己create的network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三……，lo代表127.0.0.1，即localhost，inet addr用来表示网卡的IP地址</p><p>网桥docker0创建一对对等虚拟设备接口一个叫veth，另一个叫eth0，成对匹配。</p><ol><li><p>网桥docker0创建一对对等虚拟设备接口一个叫veth，另一个叫eth0，成对匹配。</p></li><li><p>每个容器实例内部也有一块网卡，每个接口叫eth0；</p></li><li><p>每个容器实例内部也有一块网卡，每个接口叫eth0；</p><p>通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的ip，此时两个容器的网络是互通的。</p></li></ol><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><blockquote><p>验证</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line"></span><br><span class="line">docker run -d -p 8082:8080 --name tomcat81 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD-16433731850071.png" alt="下载"></p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行NAT 转换。</p><p>容器将不会获得一个独立的Network Namespace， 而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD-16433733134732.png" alt="下载"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD-16433738716223.png" alt="下载"></p><p> docke启动时总是遇见标题中的警告。。（我没遇见，可能我是新版？？1.13.1）</p><p>原因：</p><p>​    docker启动时指定–network=host或-net=host，如果还指定了-p映射端口，那这个时候就会有此警告，并且通过-p设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。</p><p>解决:</p><pre><code>解决的办法就是使用docker的其他网络模式，例如--network=bridge，这样就可以解决问题，或者直接无视。。。。O(∩_∩)O哈哈~</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p>不用使用<code>-p</code>指定端口。</p><p>使用<code>docker inspect tomcat83</code>查看详细信息</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128204719166.png" alt="image-20220128204719166"></p><p>接着在本机使用<code>ip addr</code>查看网络配置</p><p>使用命令<code>docker exec -it tomcat83 /bin/bash</code>进入tomcat容器查看网络配置</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128204903899.png" alt="image-20220128204903899"></p><p>可以发现两者的网络配置是完全一致的！！</p><p>tomcat83没有设置-p的端口映射了，如何访问启动tomcat83呢？？</p><p>上面我们说到使用<code>host</code>网络，端口号会以主机端口号为主，重复时则递增。</p><p>也就是原本的<code>8080</code>,如果已经被占用则端口号递增！</p><p>所以还是访问<code>http:ip地址:8080</code>进行访问</p><p>所以容器共享宿主机网络IP，这样的好处是外部主机与容器可以直接通信。</p><h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>禁用网络功能，只有lo标识（就是127.0.0.1表示本地回环）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p><code>docker inspect tomcat84</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128205831537.png" alt="image-20220128205831537"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部docker exec -it tomcat84 /bin/bash# 查看网络配置ip addr</span></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128210003700.png" alt="image-20220128210003700"></p><p>网络配置只有只有<code>lo</code>标识</p><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>新建的容器和已经存在的一个容器共享一个网络ip配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD-16433754634564.png" alt="下载"></p><p>Alpine Linux 是一款独立的、非商业的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。 可能很多人没听说过这个 Linux 发行版本，但是经常用 Docker 的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小但五脏俱全，镜像非常小巧，不到 6M的大小，所以特别适合容器打包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name alpine1 alpine /bin/shdocker run -it --network container:alpine1 --name alpine2 alpine /bin/sh</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128211900676.png" alt="image-20220128211900676"></p><p>可以发现alpine2的网络配置和alpine1的网络配置完全一致。此时我们在alpine1中输入<code>exit</code>会让该容器停止运行。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128212128398.png" alt="image-20220128212128398"></p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p>运行两个tomcat容器</p><p>分别进入两个容器中，各自ping对方的ip</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128213747775.png" alt="容器互ping测试"></p><p>是可以通过ip互相ping通的~但是容器的ip是动态，会改变的！</p><p>我们使用容器名来ping是ping不通的</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128213918651.png" alt="image-20220128213918651"></p><p><code>Name or service not known</code></p><p>怎么解决呢？这里就要使用到自定义网络</p><p>创建自定义<code>docker network create kylin_network</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128214319473.png" alt="image-20220128214319473"></p><p>新建容器加入上一步新建的自定义网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p --network kylin_network 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8docker run -d -p --network kylin_network 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128214815224.png" alt="image-20220128214815224"></p><p>进入两容器内，各自ping 对方的容器名，可以ping通！！</p><blockquote><p>自定义网络本身就维护好了主机名和ip的对应关系，ip和容器名都能通</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;https://gitee.com/kylincw/images/raw/master/loading.gif&quot; data-lazy-src=&quot;https://gitee.com/kylincw/images/raw/master/img/image-
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile解析</title>
    <link href="https://www.codekylin.cn/25682.html"/>
    <id>https://www.codekylin.cn/25682.html</id>
    <published>2022-01-29T09:54:27.000Z</published>
    <updated>2022-01-29T12:07:22.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/%E4%B8%8B%E8%BD%BD-16434505260081.png" alt="Dockerfile流程"></p><p>构建三步骤</p><ol><li>编写Dockerfile文件</li><li>docker build 命令构建镜像</li><li>docker run 依镜像运行容器实例</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>每条保留指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ol><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似<code>docker commit</code>的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行dockerfile中的下一条指令直到所有指令都执行完成</li></ol><p>应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p><ul><li><p>Dockerfile是软件的原材料</p></li><li><p>Docker镜像是软件的交付品</p></li><li><p>Docker容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</p></li></ul><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时会真正开始提供服务;</li><li>Docker容器，容器是直接提供服务的。</li></ol><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129193323121.png" alt="image-20220129193323121"></p><h2 id="常用保留字"><a href="#常用保留字" class="headerlink" title="常用保留字"></a>常用保留字</h2><p>FROM</p><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p>创建<code>/myfile</code>目录，上传jdk8到该目录。创建编写<code>vim Dockerfile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER kylin&lt;zhang171346168@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"><span class="comment">#安装ifconfig命令查看网络IP</span></span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"><span class="comment">#安装java8及lib库</span></span><br><span class="line">RUN yum -y install glibc.i686</span><br><span class="line">RUN mkdir /usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="comment">#ADD是相对路径，把jdk8.tar.gz添加到容器中，安装包必须要和Dockerfile文件在同一位置</span></span><br><span class="line">ADD jdk-8u271-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java/</span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/java/jdk1.8.0_271</span><br><span class="line">ENV JRE_HOME <span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">ENV PATH <span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;success--------------ok&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><code>docker build -t centosjava8:1.5 .</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128163236899.png" alt="image-20220128163236899"></p><p>17步操作，等待构建</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128163444408.png" alt="image-20220128163444408"></p><p>成功创建镜像</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128163524215.png" alt="image-20220128163524215"></p><p>运行镜像<code>docker run -it centosjava8:1.5 /bin/bash</code></p><p>通过</p><ul><li><code>pwd</code>验证工作目录</li><li><code>java -version</code>验证java版本</li><li><code>ifconfig</code>验证网络查看命令</li></ul><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128163753841.png" alt="image-20220128163753841"></p><h2 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h2><h2 id="微服务部署"><a href="#微服务部署" class="headerlink" title="微服务部署"></a>微服务部署</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128165350003.png" alt="image-20220128165350003"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper.version</span>&gt;</span>4.1.5<span class="tag">&lt;/<span class="name">mapper.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--SpringBoot通用依赖模块--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">6001</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/order/docker&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloDocker</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello docker&quot;</span>+<span class="string">&quot;\t&quot;</span>+port+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value =&quot;/order/index&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务端口号: &quot;</span>+<span class="string">&quot;\t&quot;</span>+port+<span class="string">&quot;\t&quot;</span>+UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128165800165.png" alt="image-20220128165800165"></p><p>项目搭建完成，点击Maven的<code>package</code>操作将项目打成jar包</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128170027420.png" alt="image-20220128170027420"></p><p>在服务器中创建目录<code>mkdir /mydocker</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128170400830.png" alt="image-20220128170400830"></p><p>将jar包上传到服务器该目录下。在该目录下编写<code>vim Dockerfile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"></span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"></span><br><span class="line">MAINTAINER kylin</span><br><span class="line"></span><br><span class="line"><span class="comment"># VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp</span></span><br><span class="line"></span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为kylin_docker.jar</span></span><br><span class="line"></span><br><span class="line">ADD docker_boot-0.0.1-SNAPSHOT.jar kylin_docker.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"></span><br><span class="line">RUN bash -c <span class="string">&#x27;touch /kylin_docker.jar&#x27;</span></span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/kylin_docker.jar&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露6001端口作为微服务</span></span><br><span class="line"></span><br><span class="line">EXPOSE 6001</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128171222224.png" alt="image-20220128171222224"></p><p>构建镜像<code>docker build -t kylin_docker:1.6 .</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128171510395.png" alt="image-20220128171510395"></p><p>运行镜像<code>docker run -d -p 6001:6001 kylin_docker:1.6</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128171713078.png" alt="image-20220128171713078"></p><p>通过<code>curl localhost:6001/order/docker</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220128171931178.png" alt="image-20220128171931178"></p><p>成功访问！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。&lt;/p&gt;
&lt;p&gt;&lt;img src= 
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="https://www.codekylin.cn/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器数据卷</title>
    <link href="https://www.codekylin.cn/44472.html"/>
    <id>https://www.codekylin.cn/44472.html</id>
    <published>2022-01-29T09:32:02.000Z</published>
    <updated>2022-01-29T11:26:04.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><p>有点类似Redis里面的rdb和aof文件</p><p>Docker挂载主机目录访问如果出现<code>cannot open directory .: Permission denied</code></p><p>解决办法：在挂载目录后多加一个<code>--privileged=true</code>参数即可</p><p>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，</p><p>在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用–privileged=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:容器内目录 镜像名</code></p><p>查看是否挂载成功，我们可以使用<code>docker inspect 容器ID</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129173717745.png" alt="image-20220129173717745"></p><p>此时</p><ol><li>docker修改，主机同步获得 </li><li>主机修改，docker同步获得</li><li>docker容器stop，主机修改，docker容器重启和会同步数据。</li></ol><h2 id="读写规则"><a href="#读写规则" class="headerlink" title="读写规则"></a>读写规则</h2><p>容器卷挂载默认使用的是<code>rw</code>也就是读写</p><p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:容器内目录:rw 镜像名</code></p><p>只读<code>ro</code>：read only</p><p>容器实例内部被限制，只能读取不能写。也就是进入容器后挂载的目录，容器无法对其进行写入操作，只能同步读取主机写入的内容。</p><p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:容器内目录:ro 镜像名</code></p><h2 id="卷的继承和共享"><a href="#卷的继承和共享" class="headerlink" title="卷的继承和共享"></a>卷的继承和共享</h2><p><code>docker run -it --privileged=true --volumes-from 父类 镜像名</code></p><p>此时该容器就会继承父类容器的容器卷内容。子类和父类对该容器卷的内容实现了共享。（子类操作，父类可以看见。反之亦然）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像</title>
    <link href="https://www.codekylin.cn/41351.html"/>
    <id>https://www.codekylin.cn/41351.html</id>
    <published>2022-01-29T09:21:08.000Z</published>
    <updated>2022-01-29T11:26:04.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。</p><p>只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p><blockquote><p>分层的镜像</p></blockquote><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220129172322329.png" alt="image-20220129172322329"></p><h2 id="联合文件系统"><a href="#联合文件系统" class="headerlink" title="联合文件系统"></a>联合文件系统</h2><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h2 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h2><p> docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，<strong>在Docker镜像的最底层是引导文件系统bootfs。</strong>这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/u=3538315687,2156339617&fm=253&app=138&f=JPEG&fmt=auto&q=75" alt="img"></p><p> 平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="data:application/octet-stream;base64," alt="graphic"></p><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p><blockquote><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p></blockquote><p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；</p><p>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p><strong>Docker镜像层都是只读的，容器层是可写的。</strong></p><p>当容器启动时，一个新的可写层被加载到镜像的顶部，这一层通常被称作为<code>容器层</code>,容器层之下的都叫<code>镜像层</code></p><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>docker commit提交容器副本使之成为一个新的镜像</p><p><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:标签名</code></p><p>Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于一个Base基础类，自己再按需扩展。</p><p>新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像&quot; class=&quot;headerlink&quot; title=&quot;镜像&quot;&gt;&lt;/a&gt;镜像&lt;/h2&gt;&lt;p&gt;是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://www.codekylin.cn/7569.html"/>
    <id>https://www.codekylin.cn/7569.html</id>
    <published>2022-01-29T08:56:46.000Z</published>
    <updated>2022-01-29T11:26:04.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>docker run -it tomcat /bin/bash</p><p>参数说明：</p><p>-i: 交互式操作。</p><p>-t: 终端。</p><p>centos : centos 镜像。</p><p>/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</p><p>要退出终端，直接输入 <code>exit</code></p><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p><code>exit</code>：run进去容器，exit退出，容器停止。</p><p><code>ctrl+p+q</code>：run进去容器，ctrl+p+q退出，容器不停止。</p><h3 id="启动已停止运行的容器"><a href="#启动已停止运行的容器" class="headerlink" title="启动已停止运行的容器"></a>启动已停止运行的容器</h3><p><code>docker start 容器ID或者容器名</code></p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p><code>docker stop 容器ID或者容器名</code></p><h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><p><code>docker kill 容器ID或者容器名</code></p><h3 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h3><p><code>docker rm 容器ID</code></p><h3 id="一次性删除多个容器实例"><a href="#一次性删除多个容器实例" class="headerlink" title="一次性删除多个容器实例"></a>一次性删除多个容器实例</h3><p><code>docker rm -f $(docker ps -a -q)</code></p><p><code>docker ps -a -q | xargs docker rm</code></p><h3 id="启动守护容器"><a href="#启动守护容器" class="headerlink" title="启动守护容器"></a>启动守护容器</h3><p><code>docker run -d 容器名或者Id</code></p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p><code>docker logs 容器Id或者容器名</code></p><h3 id="查看容器内运行的进场"><a href="#查看容器内运行的进场" class="headerlink" title="查看容器内运行的进场"></a>查看容器内运行的进场</h3><p><code>docker top 容器Id或者容器名</code></p><h3 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h3><p><code>docker inspect 容器Id或者容器名</code></p><h3 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a>进入正在运行的容器并以命令行交互</h3><p><code>docker exec -it 容器Id或者容器名 bashShell</code></p><p><code>docker attach 容器Id或者容器名</code></p><ul><li>attach直接进入容器启动命令的终端，不会启动新的进程。用exit退出，会导致容器停止</li><li>exec 是在容器中打卡新的终端，并且可以启动新的进程。用exit退出，不会导致容器的停止。</li></ul><p>推荐使用<code>docker exec</code></p><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><p><code>docker cp 容器Id:容器内路径 目的主机路径</code></p><h3 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h3><p><code>docker export 容器Id &gt; 文件名.tar</code></p><p><code>docker import - 镜像用户/镜像名:镜像版本号</code></p><ul><li>export导出容器的内容作为一个tar归档文件</li><li>import从tar包中的内容创建一个新的文件系统再导入为镜像</li></ul><p><a href="https://codekylin.cn/3156928619.html">Docker学习-3 | Kylin (codekylin.cn)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;启动容器&quot;&gt;&lt;a href=&quot;#启动容器&quot; class=&quot;headerlink&quot; title=&quot;启动容器&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.codekylin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>谷粒商城记录</title>
    <link href="https://www.codekylin.cn/40200.html"/>
    <id>https://www.codekylin.cn/40200.html</id>
    <published>2022-01-04T08:19:03.000Z</published>
    <updated>2022-01-04T08:20:38.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>@RefreshScope</code>实现配置自动更新</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img/image-20210724115516250.png" alt="image-20210724115516250"></p><p>项目中的使用：每个微服务创建自己的命名空间，使用配置分组区分环境，dev、test、pro、</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img/image-20210724115658170.png" alt="image-20210724115658170"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724122925501.png" alt="image-20210724122925501"></p><p><code>application.properties</code>对应命名空间下，所属分组、应用名.properties。</p><p>图片表示<code>application.properties</code>。对应nacos中<code>coupon</code>命名空间，<code>prod</code>分组，Data Id名称为应用名<code>gulimall-coupon.properties</code>文件。yml同理</p><h3 id="配置集"><a href="#配置集" class="headerlink" title="配置集"></a>配置集</h3><p>同时加载多个配置集</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img/image-20210724120455633.png" alt="image-20210724120455633"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img/image-20210724120746937.png" alt="image-20210724120746937"></p><p>注释配置文件</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img/image-20210724121131511.png" alt="image-20210724121131511"></p><p>使用配置集</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724121556728.png" alt="image-20210724121556728"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用coupon命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">29176167-82d9-46b0-9a00-687acca63fd4</span></span><br><span class="line"><span class="comment">##分组</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.group=prod</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#加载多个配置集</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[2].data-id</span>=<span class="string">other.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>此时访问<code>localhost:7000/coupon/coupon/test</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724121718295.png" alt="image-20210724121718295"></p><p>值是们项目中配置的值，并没有使用到相对应的配置文件</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724121834712.png" alt="image-20210724121834712"></p><p>这是因为</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724121903515.png" alt="image-20210724121903515"></p><p><code>No active profile set, falling back to default profiles: default</code> 我们没有设置使用配置文件的分组，默认使用的是<code>DEFAULT_GROUP</code>分组。当我们的配置集中没有程序中使用的配置则会使用默认分组的配置文件，但是coupon命名空间下没有这个默认分组的配置文件，则使用原程序的配置<code>application.properties</code></p><p>当取消注释设置使用<code>prod</code>分组后</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724122432983.png" alt="image-20210724122432983"></p><h3 id="Gatewa网关"><a href="#Gatewa网关" class="headerlink" title="Gatewa网关"></a>Gatewa网关</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724150407519.png" alt="image-20210724150407519"></p><p>引入<code>common</code>模块中引入了跟数据库有关的相关依赖，而网关项目又没配置数据库信息，从而启动报错，主启动程序排除解决报错。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724150644490.png" alt="image-20210724150644490"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要使用数据库</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GulimallGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端发送请求到网关存在跨域问题</p><p><mark>协议名、域名、端口都要相同，其中一个不同都会产生跨越问题。</mark></p><p>网关统一解决跨域问题。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724161302098.png" alt="image-20210724161302098"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724161316459.png" alt="image-20210724161316459"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724161342760.png" alt="image-20210724161342760"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724161354136.png" alt="image-20210724161354136"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724161026129.png" alt="image-20210724161026129"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuliMallCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line"></span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1.配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724161924283.png" alt="image-20210724161924283"></p><p>只希望有一个解决跨域，不希望有多个。将另一个注释，这里是<code>renren-fast</code>解决了。（网关解决跨域，人人就不要解决了，否则重复！没配网关的时候不会出现跨域问题，就是人人后台解决了）</p><h3 id="人人快速开发"><a href="#人人快速开发" class="headerlink" title="人人快速开发"></a>人人快速开发</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724153254658.png" alt="image-20210724153254658"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724153315999.png" alt="image-20210724153315999"></p><p><code>product/category</code>转换成路由为<code>product-category</code></p><p>根据规则页面则应该创建在<code>views</code>目录下<code>product</code>包下的<code>category.vue</code>文件中。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724154239421.png" alt="image-20210724154239421"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724160736662.png" alt="image-20210724160736662"></p><p>前端项目发送请求到网关中</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724160107864.png" alt="image-20210724160107864"></p><p>网关重写路径<code>RewritePath</code></p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters">https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters</a></p><p><code>uri: lb://renren-fast</code>: lb负载均衡://应用名</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210729161213.png" alt="image-20210724163635845"></p><p>返回的数据Object中<code>data</code>属性中的<code>data</code>才是我们想要的。所用我们可以使用ES6的解构赋值语法。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724163808734.png" alt="image-20210724163808734"></p><p>只拿出返回数据的<code>data</code>属性值，<code>data.data</code>中则包含我们所要的数据。</p><h3 id="前端Vue"><a href="#前端Vue" class="headerlink" title="前端Vue"></a>前端Vue</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724173433318.png" alt="image-20210724173433318"></p><p>框中内容回显，应该使用请求查询当前数据库，得到数据再回显到页面上。避免当多人在页面上操作时一个人修改了，会导致当前数据滞后。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724181819622.png" alt="image-20210724181819622"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210724181843068.png" alt="image-20210724181843068"></p><p>以上图片ES6新语法。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725095649351.png" alt="image-20210725095649351"></p><h4 id="拖拽修改菜单功能"><a href="#拖拽修改菜单功能" class="headerlink" title="拖拽修改菜单功能"></a>拖拽修改菜单功能</h4><p><code>draggable</code>开启拖拽功能</p><p><code>allow-drop</code> 拖拽时判定目标节点能否被放置`Function(draggingNode, dropNode, type)``</p><p>``type` 参数有三种情况：’prev’、’inner’ 和 ‘next’，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725103418179.png" alt="image-20210725103418179"></p><p><code>node-drop</code> 拖拽成功完成时触发的事件。共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725103827605.png" alt="image-20210725103827605"></p><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725153814273.png" alt="image-20210725153814273"></p><p>使用组件自带的方法<code>ref=&quot;xxx&quot;</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725153847537.png" alt="image-20210725153847537"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725153907961.png" alt="image-20210725153907961"></p><p><code>this.$refs.menuTree.getCheckedNodes();</code>调用树形组件的<strong>getCheckedNodes</strong>方法</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725154003981.png" alt="image-20210725154003981"></p><h2 id="OOS云存储"><a href="#OOS云存储" class="headerlink" title="OOS云存储"></a>OOS云存储</h2><p>阿里云OSS云存储首先创建一个<code>Bucket</code>。</p><h3 id="Bucket"><a href="#Bucket" class="headerlink" title="Bucket"></a>Bucket</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725211311976.png" alt="image-20210725211311976"></p><p><code>公共读</code>代表读不需要账户密码，写操作则需要。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725211518472.png" alt="image-20210725211518472"></p><p>可以点击上传文件进行上传操作，通过url访问。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725211842302.png" alt="image-20210725211842302"></p><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p><a href="https://help.aliyun.com/document_detail/32009.html?spm=a2c4g.11186623.6.923.4c6513c03fK1WG">https://help.aliyun.com/document_detail/32009.html?spm=a2c4g.11186623.6.923.4c6513c03fK1WG</a></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725212228699.png" alt="image-20210725212228699"></p><p>首先安装SDK</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>简单上传文件</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725212529299.png" alt="image-20210725212529299"></p><p><code>Endpoint</code>地域节点，在Bucekt页面概览中可以找到。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725213041410.png" alt="image-20210725213041410"></p><p>在测试中将上面的代码进行测试。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725214419532.png" alt="image-20210725214419532"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yourEndpoint填写Bucket所在地域对应的Endpoint。以华东1（杭州）为例，Endpoint填写为https://oss-cn-hangzhou.aliyuncs.com。</span></span><br><span class="line">String endpoint = <span class="string">&quot;yourEndpoint&quot;</span>;</span><br><span class="line"><span class="comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span><br><span class="line">String accessKeyId = <span class="string">&quot;yourAccessKeyId&quot;</span>;</span><br><span class="line">String accessKeySecret = <span class="string">&quot;yourAccessKeySecret&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建PutObjectRequest对象。</span></span><br><span class="line"><span class="comment">// 依次填写Bucket名称（例如examplebucket）、Object完整路径（例如exampledir/exampleobject.txt）和本地文件的完整路径。Object完整路径中不能包含Bucket名称。</span></span><br><span class="line"><span class="comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。</span></span><br><span class="line">PutObjectRequest putObjectRequest = <span class="keyword">new</span> PutObjectRequest(<span class="string">&quot;examplebucket&quot;</span>, <span class="string">&quot;exampledir/exampleobject.txt&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;D:\\localpath\\examplefile.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要上传时设置存储类型和访问权限，请参考以下示例代码。</span></span><br><span class="line"><span class="comment">// ObjectMetadata metadata = new ObjectMetadata();</span></span><br><span class="line"><span class="comment">// metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());</span></span><br><span class="line"><span class="comment">// metadata.setObjectAcl(CannedAccessControlList.Private);</span></span><br><span class="line"><span class="comment">// putObjectRequest.setMetadata(metadata);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件。</span></span><br><span class="line">ossClient.putObject(putObjectRequest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭OSSClient。</span></span><br><span class="line">ossClient.shutdown();            </span><br></pre></td></tr></table></figure><p>上传成功后，就能在我们给定的路径看到我们上传的文件。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725214536414.png" alt="image-20210725214536414"></p><h3 id="Alibaba-Cloud-OSS"><a href="#Alibaba-Cloud-OSS" class="headerlink" title="Alibaba Cloud OSS"></a>Alibaba Cloud OSS</h3><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><p><a href="https://github.com/alibaba/aliyun-spring-boot/tree/master/aliyun-spring-boot-samples/aliyun-oss-spring-boot-sample">https://github.com/alibaba/aliyun-spring-boot/tree/master/aliyun-spring-boot-samples/aliyun-oss-spring-boot-sample</a></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725220653647.png" alt="image-20210725220653647"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将我们之前导入的SDK注释掉。这里要指定一下版本，可以区阿里云的Maven仓库查看依赖<a href="https://maven.aliyun.com/mvn/search">https://maven.aliyun.com/mvn/search</a></p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725222913248.png" alt="image-20210725222913248"></p><p>配置文件配置OSS</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#oss配置</span></span><br><span class="line"><span class="attr">alibaba:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">access-key:</span></span><br><span class="line">    <span class="attr">secret-key:</span></span><br><span class="line">    <span class="attr">oss:</span></span><br><span class="line">      <span class="attr">endpoint:</span></span><br></pre></td></tr></table></figure><h4 id="可行"><a href="#可行" class="headerlink" title="可行"></a>可行</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alicloud:</span></span><br><span class="line">      <span class="attr">access-key:</span> <span class="string">xxxxxxxxxxxxxx</span></span><br><span class="line">      <span class="attr">secret-key:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">      <span class="attr">oss:</span></span><br><span class="line">        <span class="attr">endpoint:</span> <span class="string">oss-cn-shenzhen.aliyuncs.com</span></span><br></pre></td></tr></table></figure><p>我们可以通过<code>OSSClient</code>对象进行相关操作，省略了创建OSSClient的步骤。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210725223431409.png" alt="image-20210725223431409"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GulimallProductApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    OSSClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOSSUpload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ossClient.putObject(<span class="string">&quot;mall-kylin&quot;</span>, <span class="string">&quot;exampledir/ossClient.txt&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\kylin\\Desktop\\OSS.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前尚未知晓原因。</p><h4 id="服务端签名后直传"><a href="#服务端签名后直传" class="headerlink" title="服务端签名后直传"></a>服务端签名后直传</h4><p><a href="https://help.aliyun.com/document_detail/31926.html?spm=a2c4g.11186623.6.1749.5a3c43d33sLRZe">https://help.aliyun.com/document_detail/31926.html?spm=a2c4g.11186623.6.1749.5a3c43d33sLRZe</a></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210726224157206.png" alt="image-20210726224157206"></p><p>选择代码示例Java。</p><p>应用服务器核心代码解析</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210726224417758.png" alt="image-20210726224417758"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String accessId = <span class="string">&quot;&lt;yourAccessKeyId&gt;&quot;</span>; <span class="comment">// 请填写您的AccessKeyId。</span></span><br><span class="line">        String accessKey = <span class="string">&quot;&lt;yourAccessKeySecret&gt;&quot;</span>; <span class="comment">// 请填写您的AccessKeySecret。</span></span><br><span class="line">        String endpoint = <span class="string">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="comment">// 请填写您的 endpoint。</span></span><br><span class="line">        String bucket = <span class="string">&quot;bucket-name&quot;</span>; <span class="comment">// 请填写您的 bucketname 。</span></span><br><span class="line">        String host = <span class="string">&quot;https://&quot;</span> + bucket + <span class="string">&quot;.&quot;</span> + endpoint; <span class="comment">// host的格式为 bucketname.endpoint</span></span><br><span class="line">        <span class="comment">// callbackUrl为 上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。</span></span><br><span class="line">        String callbackUrl = <span class="string">&quot;http://88.88.88.88:8888&quot;</span>;</span><br><span class="line">        String dir = <span class="string">&quot;user-dir-prefix/&quot;</span>; <span class="comment">// 用户上传文件时指定的前缀。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessId, accessKey);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> expireTime = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="number">1000</span>;</span><br><span class="line">            Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line">            <span class="comment">// PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。</span></span><br><span class="line">            PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, <span class="number">1048576000</span>);</span><br><span class="line">            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</span><br><span class="line"></span><br><span class="line">            String postPolicy = ossClient.generatePostPolicy(expiration, policyConds);</span><br><span class="line">            <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line">            String postSignature = ossClient.calculatePostSignature(postPolicy);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; respMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">            respMap.put(<span class="string">&quot;accessid&quot;</span>, accessId);</span><br><span class="line">            respMap.put(<span class="string">&quot;policy&quot;</span>, encodedPolicy);</span><br><span class="line">            respMap.put(<span class="string">&quot;signature&quot;</span>, postSignature);</span><br><span class="line">            respMap.put(<span class="string">&quot;dir&quot;</span>, dir);</span><br><span class="line">            respMap.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">            respMap.put(<span class="string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="number">1000</span>));</span><br><span class="line">            <span class="comment">// respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));</span></span><br><span class="line"></span><br><span class="line">            JSONObject jasonCallback = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            jasonCallback.put(<span class="string">&quot;callbackUrl&quot;</span>, callbackUrl);</span><br><span class="line">            jasonCallback.put(<span class="string">&quot;callbackBody&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;filename=$&#123;object&#125;&amp;size=$&#123;size&#125;&amp;mimeType=$&#123;mimeType&#125;&amp;height=$&#123;imageInfo.height&#125;&amp;width=$&#123;imageInfo.width&#125;&quot;</span>);</span><br><span class="line">            jasonCallback.put(<span class="string">&quot;callbackBodyType&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            String base64CallbackBody = BinaryUtil.toBase64String(jasonCallback.toString().getBytes());</span><br><span class="line">            respMap.put(<span class="string">&quot;callback&quot;</span>, base64CallbackBody);</span><br><span class="line"></span><br><span class="line">            JSONObject ja1 = JSONObject.fromObject(respMap);</span><br><span class="line">            <span class="comment">// System.out.println(ja1.toString());</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;GET, POST&quot;</span>);</span><br><span class="line">            response(request, response, ja1.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Assert.fail(e.getMessage());</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210726225017611.png" alt="image-20210726225017611"></p><p>这一段代码是返回Json解决跨域，跨域我们前面解决了。Json则使用的是<code>@RestController</code>也不用了。所以删掉这段代码直接返回respMap。</p><p>由于导入了<code>spring-cloud-starter-alicloud-oss</code>所以创建OssClient步骤可以省略，文件前缀按日期格式来划分。回调服务器的URL暂时用不到注释掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    OSSClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.cloud.alicloud.oss.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.cloud.alicloud.oss.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.cloud.alicloud.access-key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/oss/policy&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">policy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">&quot;https://&quot;</span> + bucket + <span class="string">&quot;.&quot;</span> + endpoint; <span class="comment">// host的格式为 bucketname.endpoint</span></span><br><span class="line">        <span class="comment">// callbackUrl为 上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。</span></span><br><span class="line">        <span class="comment">//String callbackUrl = &quot;http://88.88.88.88:8888&quot;;</span></span><br><span class="line">        String format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        String dir = format + <span class="string">&quot;/&quot;</span>; <span class="comment">// 用户上传文件时指定的前缀。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> expireTime = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="number">1000</span>;</span><br><span class="line">            Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line">            <span class="comment">// PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。</span></span><br><span class="line">            PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, <span class="number">1048576000</span>);</span><br><span class="line">            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</span><br><span class="line"></span><br><span class="line">            String postPolicy = ossClient.generatePostPolicy(expiration, policyConds);</span><br><span class="line">            <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line">            String postSignature = ossClient.calculatePostSignature(postPolicy);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; respMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">            respMap.put(<span class="string">&quot;accessid&quot;</span>, accessId);</span><br><span class="line">            respMap.put(<span class="string">&quot;policy&quot;</span>, encodedPolicy);</span><br><span class="line">            respMap.put(<span class="string">&quot;signature&quot;</span>, postSignature);</span><br><span class="line">            respMap.put(<span class="string">&quot;dir&quot;</span>, dir);</span><br><span class="line">            respMap.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">            respMap.put(<span class="string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="number">1000</span>));</span><br><span class="line">            <span class="comment">// respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));</span></span><br><span class="line"></span><br><span class="line">            JSONObject jasonCallback = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="comment">//jasonCallback.put(&quot;callbackUrl&quot;, callbackUrl);</span></span><br><span class="line">            jasonCallback.put(<span class="string">&quot;callbackBody&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;filename=$&#123;object&#125;&amp;size=$&#123;size&#125;&amp;mimeType=$&#123;mimeType&#125;&amp;height=$&#123;imageInfo.height&#125;&amp;width=$&#123;imageInfo.width&#125;&quot;</span>);</span><br><span class="line">            jasonCallback.put(<span class="string">&quot;callbackBodyType&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            String base64CallbackBody = BinaryUtil.toBase64String(jasonCallback.toString().getBytes());</span><br><span class="line">            respMap.put(<span class="string">&quot;callback&quot;</span>, base64CallbackBody);</span><br><span class="line">            <span class="keyword">return</span> respMap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Assert.fail(e.getMessage());</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210726230653881.png" alt="image-20210726230653881"></p><p>同时配置网关</p><p><a href="http://localhost:88/api/thirdparty/oss/policy">http://localhost:88/api/thirdparty/oss/policy</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment">#按顺序依次向下拦截</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment">#http://localhost:88/?url=baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baidu</span></span><br><span class="line">        <span class="comment">#http://localhost:88/?url=qq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">third_party_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-third-party</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/thirdparty/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/thirdparty/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210726231356438.png" alt="image-20210726231356438"></p><h4 id="前端Upload组件"><a href="#前端Upload组件" class="headerlink" title="前端Upload组件"></a>前端Upload组件</h4><p>拿到外网访问的Bucket域名</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727203950435.png" alt="image-20210727203950435"></p><p>修改成<code>action</code>的地址</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727204103136.png" alt="image-20210727204103136"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727205519052.png" alt="image-20210727205519052"></p><p>向阿里云OSS地发送请求的时候，出现了跨域问题。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727205702259.png" alt="image-20210727205702259"></p><p>配置跨域设置。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727205803900.png" alt="image-20210727205803900"></p><p>此时就解决了跨域问题。</p><p>表格自定义显示logo图片<a href="https://element.eleme.io/#/zh-CN/component/table">https://element.eleme.io/#/zh-CN/component/table</a></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727211330246.png" alt="image-20210727211330246"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210727211508500.png" alt="image-20210727211508500"></p><h4 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210728205357119.png" alt="image-20210728205357119"></p><p><a href="https://element.eleme.io/#/zh-CN/component/form">https://element.eleme.io/#/zh-CN/component/form</a></p><p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。校验规则参见 <a href="https://github.com/yiminghe/async-validator">async-validator</a></p><h4 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210728223819878.png" alt="image-20210728223819878"></p><p><code>javax.validation.constraints</code>包下注解进行校验。</p><p>控制器参数使用<code>@Valid</code>注解标注，迭代注解<code>@Validated</code>，获取校验结果<code>BindingResult</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210728224840707.png" alt="image-20210728224840707"></p><h4 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h4><p>使用<code>@ControllerAdvice</code>注解这是一个增强的 Controller。使用这个 Controller ，可以实现三个方面的功能：</p><ol><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理</li></ol><p><code>@ExceptionHandler</code>异常处理方法，处理指定的异常类型。</p><p><code>@RestControllerAdvice</code>=<code>@RequestBody</code>+<code>@ControllerAdvice</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210728232827128.png" alt="image-20210728232827128"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@RequestBody</span></span><br><span class="line"><span class="comment">//@ControllerAdvice(basePackages = &quot;com.kylin.gulimall.product.controller&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.kylin.gulimall.product.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理JSR303校验抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handlerValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());</span><br><span class="line">        BindingResult bindingResult = e.getBindingResult();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        bindingResult.getFieldErrors().forEach(fieldError -&gt; &#123;</span><br><span class="line">            map.put(fieldError.getField(), fieldError.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnum.VALID_EXCEPTION.getCode(), BizCodeEnum.VALID_EXCEPTION.getMsg()).put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理所有异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnum.UNKNOWN_EXCEPTION.getCode(), BizCodeEnum.UNKNOWN_EXCEPTION.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义错误代码枚举类</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210728232921327.png" alt="image-20210728232921327"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误码和错误信息定义类</span></span><br><span class="line"><span class="comment"> * 1. 错误码定义规则为5为数字</span></span><br><span class="line"><span class="comment"> * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常</span></span><br><span class="line"><span class="comment"> * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式</span></span><br><span class="line"><span class="comment"> * 错误码列表：</span></span><br><span class="line"><span class="comment"> * 10: 通用</span></span><br><span class="line"><span class="comment"> * 001：参数格式校验</span></span><br><span class="line"><span class="comment"> * 002: 短信验证码频率太高</span></span><br><span class="line"><span class="comment"> * 11: 商品</span></span><br><span class="line"><span class="comment"> * 12: 订单</span></span><br><span class="line"><span class="comment"> * 13: 购物车</span></span><br><span class="line"><span class="comment"> * 14: 物流</span></span><br><span class="line"><span class="comment"> * 15: 用户</span></span><br><span class="line"><span class="comment"> * 21: 库存</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BizCodeEnum</span> </span>&#123;</span><br><span class="line">    UNKNOWN_EXCEPTION(<span class="number">10000</span>, <span class="string">&quot;系统未知异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VALID_EXCEPTION(<span class="number">10001</span>, <span class="string">&quot;参数格式校验失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    SMS_CODE_EXCEPTION(<span class="number">10002</span>, <span class="string">&quot;验证码获取频率太高,稍后再试&quot;</span>),</span><br><span class="line"></span><br><span class="line">    TO_MANY_REQUEST(<span class="number">10003</span>, <span class="string">&quot;请求流量过大&quot;</span>),</span><br><span class="line"></span><br><span class="line">    SMS_SEND_CODE_EXCEPTION(<span class="number">10403</span>, <span class="string">&quot;短信发送失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    USER_EXIST_EXCEPTION(<span class="number">15001</span>, <span class="string">&quot;用户已经存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    PHONE_EXIST_EXCEPTION(<span class="number">15002</span>, <span class="string">&quot;手机号已经存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    LOGINACTT_PASSWORD_ERROR(<span class="number">15003</span>, <span class="string">&quot;账号或密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    SOCIALUSER_LOGIN_ERROR(<span class="number">15004</span>, <span class="string">&quot;社交账号登录失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    NOT_STOCK_EXCEPTION(<span class="number">21000</span>, <span class="string">&quot;商品库存不足&quot;</span>),</span><br><span class="line"></span><br><span class="line">    PRODUCT_UP_EXCEPTION(<span class="number">11000</span>, <span class="string">&quot;商品上架异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    BizCodeEnum(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729141842300.png" alt="image-20210729141842300"></p><p>首先定义两个分组</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729141932693.png" alt="image-20210729141932693"></p><p>校验注解中的<code>group</code>属性指定所属分组</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729141956346.png" alt="image-20210729141956346"></p><p>参数中使用<code>@Validated</code>注解给value赋值，表明该参数所属分组。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729142110247.png" alt="image-20210729142110247"></p><p><code>group</code>属性没指定分组，个人感觉所属空分组。每个参数都指定不同分组的话，非常冗余。</p><h4 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210729161154.png" alt="image-20210729160928985"></p><p>可以参考别人写好的注解</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729143629347.png" alt="image-20210729143629347"></p><p>直接将其复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义校验注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ListValue &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;</span>&#123;com.kylin.common.valid.ListValue.message&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    int[] value() default &#123;&#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义注解的默认message消息会从<code>ValidationMessages.properties</code>中读取message名称属性的值。也就是这里配置的<code>com.kylin.common.valid.ListValue.message</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729144725438.png" alt="image-20210729144725438"></p><p>接着编写自定义校验器实现<code>ConstraintValidator</code>接口</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20210729151043772.png" alt="image-20210729151043772"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义参数校验器</span><br><span class="line"> *</span><br><span class="line"> * @author kylin</span><br><span class="line"> */</span><br><span class="line">public class ListValueConstraintValidator implements ConstraintValidator&lt;ListValue, Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化方法</span><br><span class="line">     *</span><br><span class="line">     * @param constraintAnnotation 注解</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void initialize(ListValue constraintAnnotation) &#123;</span><br><span class="line">        int[] value = constraintAnnotation.value();</span><br><span class="line">        for (int i : value) &#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否校验成功</span><br><span class="line">     *</span><br><span class="line">     * @param value   需要校验的值</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isValid(Integer value, ConstraintValidatorContext context) &#123;</span><br><span class="line">        return set.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在自定义校验注解中<code>@Constraint(validatedBy = &#123;&#125;)</code>指定校验器。<code>@Constraint(validatedBy = &#123;ListValueConstraintValidator.class&#125;)</code></p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>docker安装<code>elasticsearch</code></p><p><code>docker pull elasticsearch:7.4.2</code></p><ol><li>创建目录，挂载文件。授权</li><li>配置elasticsearch，允许所有的ip访问</li><li>docker允许命令 容器名为<code>elasticsearch</code> 开发9200、9300端口。当前以当节点允许，配置Java内存，-v挂载，-d运行images</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line">chmod -R 777 /mydata/elasticsearch/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http.host: 0.0.0.0&quot;</span>&gt;&gt;/mydata/elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 --privileged=<span class="literal">true</span> \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx128m&quot;</span> \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><p><code>free -m</code>查看内存命令</p><p>docker安装<code>kibana</code></p><p><code>docker pull kibana:7.4.2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.56.10:9200 -p 5601:5601 -d kibana:7.4.2</span><br></pre></td></tr></table></figure><h3 id="入门操作"><a href="#入门操作" class="headerlink" title="入门操作"></a>入门操作</h3><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806171403.png" alt="image-20210806171354295"></p><p>PUT和POST都可以</p><ol><li>POST新增。如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号。</li><li>PUT可以新增可以修改。PUT必须指定id。由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错。</li></ol><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806173047.png" alt="image-20210806173046325"></p><p><code>_seq_no</code>乐观锁<code>?if_seq_no=0&amp;if_primary_term=1</code></p><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806174605.png" alt="image-20210806174603841"></p><h4 id="删除文档或索引"><a href="#删除文档或索引" class="headerlink" title="删除文档或索引"></a>删除文档或索引</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806174909.png" alt="image-20210806174908113"></p><h4 id="批量API"><a href="#批量API" class="headerlink" title="批量API"></a>批量API</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806175100.png" alt="image-20210806175055903"></p><h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806191138.png" alt="image-20210806191136797"></p><h4 id="检索信息"><a href="#检索信息" class="headerlink" title="检索信息"></a>检索信息</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806191236.png" alt="image-20210806191235375"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806191746.png" alt="image-20210806191741143"></p><h4 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html</a></p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>vagrant 使用<code>root</code>账号连接开启过程</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806193440.png" alt="image-20210806193439014"></p><p>安装<code>wget</code></p><p><code>yum install wget</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip</span><br><span class="line"></span><br><span class="line">unzip elasticsearch-analysis-ik-7.4.2.zip</span><br><span class="line"></span><br><span class="line">rm -rf *.zip</span><br><span class="line"></span><br><span class="line">mv ./* ik</span><br></pre></td></tr></table></figure><p>可以进入到容器里面</p><p><code>docker exec -it  elasticsearch /bin/bash</code></p><p>进入到了<code>cd /bin/</code></p><p>运行<code>elasticsearch-plugin list</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806200320.png" alt="image-20210806200318664"></p><p>安装成功。退出容器，重启<code>docker restart elasticserach</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806201226.png" alt="image-20210806201224934"></p><h4 id="词库"><a href="#词库" class="headerlink" title="词库"></a>词库</h4><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210806201513.png" alt="image-20210806201510643"></p><h3 id="可视化插件"><a href="#可视化插件" class="headerlink" title="可视化插件"></a>可视化插件</h3><p><a href="https://blog.csdn.net/ljcgit/article/details/103856634">https://blog.csdn.net/ljcgit/article/details/103856634</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示文件</span></span><br><span class="line">ls</span><br><span class="line">结果如下：</span><br><span class="line">LICENSE.txt  README.textile  config  lib   modules</span><br><span class="line">NOTICE.txt   bin             data    logs  plugins</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 进入配置文件夹</span></span><br><span class="line"><span class="built_in">cd</span> config</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示文件</span></span><br><span class="line">ls</span><br><span class="line">结果如下：</span><br><span class="line">elasticsearch.keystore  ingest-geoip  log4j2.properties  roles.yml  users_roles</span><br><span class="line">elasticsearch.yml       jvm.options   role_mapping.yml   users</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi elasticsearch.yml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 加入跨域配置</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line">docker run -d --name es_admin -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812104124.png" alt="image-20210812104116061"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812143955.png" alt="image-20210812143954097"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812144004.png" alt="image-20210812144004182"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812144030.png" alt="image-20210812144030106"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812144045.png" alt="image-20210812144044282"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812150059.png" alt="image-20210812150058383"></p><p><code>include /etc/nginx/conf.d/*.conf;</code></p><p><mark>这里会将这个目录下的配置文件一并包括生效，所以要注意这里配置文件所配置的信息。</mark></p><h3 id="负载均衡到网关"><a href="#负载均衡到网关" class="headerlink" title="负载均衡到网关"></a>负载均衡到网关</h3><p>首先配置本机的<code>host</code>输入gulimall.com访问虚拟机IP地址80端口</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812161759.png" alt="image-20210812161751339"></p><p>虚拟机的80端口运行了Nginx，docker中的<code>/etc/nginx/conf.d/gulimall.conf</code>中配置了<code>server_name gulimall.com</code>当访问的时候会携带host参数，代理地址为<code>http://gulimall</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812162227.png" alt="image-20210812162226922"></p><p>而Nginx的配置文件<code>nginx.conf</code>中配置了gulimall的负载均衡转发到了我们的网关。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812162447.png" alt="image-20210812162446209"></p><p>我们的网关则把请求转发到了我们的<code>gulimall-product</code>服务中。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812162557.png" alt="image-20210812162556180"></p><h2 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812193121.png" alt="image-20210812193120140"></p><h3 id="nginx测试"><a href="#nginx测试" class="headerlink" title="nginx测试"></a>nginx测试</h3><p>向<code>http://192.168.56.10/</code>发送测试</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812171705.png" alt="image-20210812171704547"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812171652.png" alt="image-20210812171651589"></p><p>使用<code>docker stats</code>实时查看容器运行情况</p><p>当我点击运行测试的时候，我们能看见</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812171817.png" alt="image-20210812171816759"></p><p>所以nginx是<code>CPU密集型</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812172127.png" alt="image-20210812172126327"></p><p>这里出现的异常是我们线程组给<code>stop</code>导致的，从而请求失败。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812172256.png" alt="image-20210812172255668"></p><ul><li>吞吐量/s：8086.8</li><li>90%响应时间：7</li><li>99%相应时间：18</li></ul><h3 id="网关测试"><a href="#网关测试" class="headerlink" title="网关测试"></a>网关测试</h3><p>向<code>http://localhost:88/</code>发送测试</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812192452.png" alt="image-20210812192450252"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812195028.png" alt="image-20210812195027308"></p><ul><li>吞吐量/s：26274.7</li><li>90%响应时间：3</li><li>99%相应时间：9</li></ul><h3 id="简单服务测试"><a href="#简单服务测试" class="headerlink" title="简单服务测试"></a>简单服务测试</h3><p>访问<code>http://localhost:10000/hello</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812194727.png" alt="image-20210812194718448"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812194740.png" alt="image-20210812194739087"></p><ul><li>吞吐量/s：45000</li><li>90%响应时间：2</li><li>99%相应时间：4</li></ul><h3 id="网关-简单服务测试"><a href="#网关-简单服务测试" class="headerlink" title="网关+简单服务测试"></a>网关+简单服务测试</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812194923.png" alt="image-20210812194923054"></p><p>访问测试<code>http://localhost:88/hello</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812195248.png" alt="image-20210812195247406"></p><ul><li>吞吐量/s：6409.0</li><li>90%响应时间：3</li><li>99%相应时间：13</li></ul><p>两个一加起来吞吐量大量减少。</p><h3 id="nginx-网关-简单服务测试"><a href="#nginx-网关-简单服务测试" class="headerlink" title="nginx+网关+简单服务测试"></a>nginx+网关+简单服务测试</h3><p>访问<code>http://gulimall.com/hello</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812195847.png" alt="image-20210812195846772"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812200014.png" alt="image-20210812200013128"></p><ul><li>吞吐量/s：2279.2</li><li>90%响应时间：34</li><li>99%相应时间：52</li></ul><p>中间件越多，性能损失越多，大多损失在网络交互了。</p><h3 id="首页一级菜单渲染"><a href="#首页一级菜单渲染" class="headerlink" title="首页一级菜单渲染"></a>首页一级菜单渲染</h3><p>访问测试<code>http://localhost:10000/</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812200643.png" alt="image-20210812200642108"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812200700.png" alt="image-20210812200700155"></p><ul><li><p>吞吐量/s：1831.5（db、thymeleaf）</p></li><li><p>90%响应时间：38</p></li><li><p>99%相应时间：61</p></li></ul><p><strong>tymeleaf开启缓存</strong></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812203213.png" alt="image-20210812203212229"></p><ul><li>吞吐量/s：2632.7</li><li>90%响应时间：27</li><li>99%相应时间：50</li></ul><p><strong>日志打印级别提高为erro</strong></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812204257.png" alt="image-20210812203618169"></p><ul><li>吞吐量/s：3125.5</li><li>90%响应时间：23</li><li>99%相应时间：42</li></ul><p><strong>字段设置为索引</strong></p><h3 id="首页三级分类数据获取"><a href="#首页三级分类数据获取" class="headerlink" title="首页三级分类数据获取"></a>首页三级分类数据获取</h3><p>访问测试<code>http://localhost:10000/index/catalog.json</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812201420.png" alt="image-20210812201419596"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812201433.png" alt="image-20210812201433004"></p><ul><li>吞吐量/s：323.2（db）</li><li>90%响应时间：176</li><li>99%相应时间：266</li></ul><h3 id="首页全量数据获取"><a href="#首页全量数据获取" class="headerlink" title="首页全量数据获取"></a>首页全量数据获取</h3><p>访问测试<code>http://localhost:10000/</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812202026.png" alt="image-20210812202025084"></p><p><code>高级</code>设置中勾选<code>从HTML文件获取所有内容的资源</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812202119.png" alt="image-20210812202119001"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812202309.png" alt="image-20210812202309018"></p><ul><li>吞吐量/s：62（静态资源）</li><li>90%响应时间：1122</li><li>99%相应时间：1510</li></ul><p>异常是因为有些文件报404</p><h3 id="Nginx动静分离优化"><a href="#Nginx动静分离优化" class="headerlink" title="Nginx动静分离优化"></a>Nginx动静分离优化</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812204223.png" alt="image-20210812204222971"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812205809.png" alt="image-20210812205808354"></p><p>将静态目录复制到虚拟机<code>/mydata/nginx/html/static</code>的目录下</p><p>进入docker容器，编写配置<code>/etc/nginx/conf.d/gulimall.conf</code>文件</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812210016.png" alt="image-20210812210015603"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location /static/ &#123;root /usr/share/nginx/html;&#125;</span><br></pre></td></tr></table></figure><p>其中容器内目录<code>/usr/share/nginx/html</code>目录挂载到了<code>/mydata/nginx/html/</code>也就是我们存放静态资源的地方。</p><p>访问<code>http://gulimall.com</code>进行测试</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210812210556.png" alt="image-20210812210555606"></p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813090918.png" alt="image-20210813090910495"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813091003.png" alt="image-20210813091002888"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813090934.png" alt="image-20210813090933599"></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813091750.png" alt="image-20210813091749522"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisTemplate</span> <span class="keyword">extends</span> <span class="title">RedisTemplate</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new &lt;code&gt;StringRedisTemplate&lt;/code&gt; instance. &#123;<span class="doctag">@link</span> #setConnectionFactory(RedisConnectionFactory)&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@link</span> #afterPropertiesSet()&#125; still need to be called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setKeySerializer(RedisSerializer.string());</span><br><span class="line">setValueSerializer(RedisSerializer.string());</span><br><span class="line">setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">setHashValueSerializer(RedisSerializer.string());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new &lt;code&gt;StringRedisTemplate&lt;/code&gt; instance ready to be used.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionFactory connection factory for creating new connections</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringRedisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line">setConnectionFactory(connectionFactory);</span><br><span class="line">afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RedisConnection <span class="title">preProcessConnection</span><span class="params">(RedisConnection connection, <span class="keyword">boolean</span> existingConnection)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultStringRedisConnection(connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StringRedisTemplate</code>是专门操作<code>string</code>类型数据。 </p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813093157.png" alt="image-20210813093156229"></p><p>使用redis将数据存入到缓存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; getCatelogJson() &#123;</span><br><span class="line">    <span class="comment">//1.加入缓存逻辑，缓存中存的数据就是json字符串</span></span><br><span class="line">    String catalogJson = redisTemplate.opsForValue().get(<span class="string">&quot;catalogJson&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(catalogJson)) &#123;</span><br><span class="line">        <span class="comment">//2.缓存中没有，查询数据库</span></span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catalogJsonFromDB = getCatalogJsonFromDB();</span><br><span class="line">        <span class="comment">//3.查询到的数据再放入缓存，将对象转为json放在缓存中</span></span><br><span class="line">        String s = JSON.toJSONString(catalogJsonFromDB);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, s);</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Json字符串--&gt;对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catalogJson, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时压测访问首页三级分类数据获取<code>http://localhost:10000/index/catalog.json</code>（日志关闭，thymeleaf缓存开启，索引创建）</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813094113.png" alt="image-20210813094112302"></p><ul><li>吞吐量/s：1351</li><li>90%响应时间：44</li><li>99%相应时间：99</li></ul><p>出现堆外内存溢出：<code>OutOfDirectMemoryError</code>（lettuce5.2.1暂时没出现，5.1.8出现问题）</p><ul><li>springboot2.0以后默认使用lettuce作为操作redis的客户端。它使用netty进行网络通信。</li><li>lettuce的bug导致netty堆外内存溢出</li></ul><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813104440.png" alt="image-20210813101516117"></p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813104415.png" alt="image-20210813104402637"></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813104424.png" alt="image-20210813104423528"></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813104511.png" alt="image-20210813104510337"></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813111420.png" alt="image-20210813111419751"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813114338.png" alt="image-20210813114326039"></p><p><strong>结果放入缓存这步操作应该放在锁内，否则会因为网络通信延迟导致又查询了一次数据库。</strong></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813143734.png" alt="image-20210813143732232"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813143752.png" alt="image-20210813143747795"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813145121.png" alt="image-20210813145120148"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813145512.png" alt="image-20210813145511448"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813145540.png" alt="image-20210813145538707"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813145603.png" alt="image-20210813145602560"></p><h4 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/redisson/redisson/wiki/Table-of-Content">https://github.com/redisson/redisson/wiki/Table-of-Content</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有对Redisson的使用都是通过RedissonClient对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建配置</span></span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.56.10:6379&quot;</span>);</span><br><span class="line">    <span class="comment">//2.根据Config创建出RedissonClient示例</span></span><br><span class="line">    RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">    <span class="keyword">return</span> redissonClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813194302.png" alt="image-20210813194300518"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813194312.png" alt="image-20210813194310763"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813194329.png" alt="image-20210813194328400"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813194345.png" alt="image-20210813194344403"></p><h3 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813195754.png" alt="image-20210813195753380"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210814102653.png" alt="image-20210814102652593"></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210814101006.png" alt="image-20210814101005106"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;, key = &quot;#root.method.name&quot;, sync = true)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title">getLevel1Categories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;get Level 1 Categories........&quot;</span>);</span><br><span class="line">    <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">    List&lt;CategoryEntity&gt; categoryEntities = <span class="keyword">this</span>.baseMapper.selectList(</span><br><span class="line">            <span class="keyword">new</span> QueryWrapper&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;消耗时间：&quot;</span> + (System.currentTimeMillis() - l));</span><br><span class="line">    <span class="keyword">return</span> categoryEntities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210814110713.png" alt="image-20210814110712397"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件的配置没有用上</span></span><br><span class="line"><span class="comment">     * 1. 原来和配置文件绑定的配置类为：<span class="doctag">@ConfigurationProperties</span>(prefix = &quot;spring.cache&quot;)</span></span><br><span class="line"><span class="comment">     *                                public class CacheProperties</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 2. 要让他生效，要加上 <span class="doctag">@EnableConfigurationProperties</span>(CacheProperties.class)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheConfiguration <span class="title">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()));</span><br><span class="line">        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line"></span><br><span class="line">        CacheProperties.Redis redisProperties = cacheProperties.getRedis();</span><br><span class="line">        <span class="comment">//将配置文件中所有的配置都生效</span></span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br><span class="line"><span class="comment">#毫秒</span></span><br><span class="line"><span class="meta">spring.cache.redis.time-to-live</span>=<span class="string">3600000</span></span><br><span class="line"><span class="comment">#如果指定了前缀就用我们指定的前缀，如果没有就默认使用缓存的名字作为前缀</span></span><br><span class="line"><span class="meta">spring.cache.redis.key-prefix</span>=<span class="string">CACHE_</span></span><br><span class="line"><span class="comment">#是否使用key前缀</span></span><br><span class="line"><span class="meta">spring.cache.redis.use-key-prefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否缓存空值，防止缓存穿透</span></span><br><span class="line"><span class="meta">spring.cache.redis.cache-null-values</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210817144353440.png" alt="image-20210817144353440"></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><a href="https://codekylin.cn/1019.html">JUC之线程池 | Kylin (codekylin.cn)</a></p><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p><code>CompletableFuture</code>类似前端的<code>promise</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818092304976.png" alt="image-20210818092304976"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818094039521.png" alt="image-20210818094039521"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818094728948.png" alt="image-20210818094728948"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818095834087.png" alt="image-20210818095834087"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818111217185.png" alt="image-20210818111217185"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818152255093.png" alt="image-20210818152255093"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818153559996.png" alt="image-20210818153559996"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20210818153618868.png" alt="image-20210818153618868"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@RefreshScope&lt;/code&gt;实现配置自动更新&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;https://g
      
    
    </summary>
    
    
    
      <category term="记录" scheme="https://www.codekylin.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis分布式锁</title>
    <link href="https://www.codekylin.cn/64631.html"/>
    <id>https://www.codekylin.cn/64631.html</id>
    <published>2022-01-02T05:25:53.000Z</published>
    <updated>2022-01-04T00:51:44.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">1111</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.56.10</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）默认8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="comment">#连接池最大阻塞等待时间（使用负值表示没有限制）默认-1</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接默认8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接默认0</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><p>redis的相关配置。</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置redis的key、value序列化配置。</p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//库存数量-1</span></span><br><span class="line">            <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102171549546.png" alt="image-20220102171549546"></p><p>创建两个redis项目，一个在端口<code>1111</code>运行，一个在<code>2222</code>运行。（redis记得启动）</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102171713356.png" alt="image-20220102171713356"></p><p>redis中给键名为<code>goods:001</code>设置值value为<code>100</code></p><p>启动项目访问<code>http://localhost:1111/buyGoods</code>和<code>http://localhost:3333/buyGoods</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102171855380.png" alt="image-20220102171855380"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102171924317.png" alt="image-20220102171924317"></p><p>消费商品成功~</p><h2 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">    String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">    <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//库存数量-1</span></span><br><span class="line">        <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">        System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102172303711.png" alt="image-20220102172303711"></p><p>此时这段代码，在一个线程是没有问题的，但是多线程下，则会出现各种问题，所以需要加锁。</p><h2 id="2-0（加锁）"><a href="#2-0（加锁）" class="headerlink" title="2.0（加锁）"></a>2.0（加锁）</h2><p>加锁的话我们是使用<code>synchronized</code>还是<code>lock</code>呢？？</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102172808173.png" alt="image-20220102172808173"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//库存数量-1</span></span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用<code>synchronized</code>，像上图这样，虽然成功加锁，但是其他的请求线程则会一直停在这等待，锁的释放，请求会一直在转圈，造成线程的挤压。</p><p><code>synchronized</code>和<code>lock</code>的区别是在与业务。</p><ul><li>不见不散</li><li>过时不候</li></ul><p>lock可以设置尝试获取时间，超过了则做其他操作。</p><p>synchronized则一直等待。</p><p>所以我们可以使用<code>lock</code>的<code>tryLock()</code>方法，设置获取时间，超过了则做其他操作。</p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p><a href="https://www.cnblogs.com/saneri/p/11799865.html">docker部署nginx</a></p><p><code>docker run --name nginx -p 80:80 -d nginx</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102174638735.png" alt="image-20220102174638735"></p><p>将<code>incloude /etc/nginx/conf.d/*.conf</code>注释，否则会默认先加载这个文件下的conf配置。导致下面我们配的失效</p><p>访问<code>http://192.168.56.10/buyGoods/</code>则会负载均衡到本地启动的两个项目中</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102180001691.png" alt="image-20220102180001691"></p><p>此时我们访问<a href="http://192.168.56.10/buyGoods/则会轮询消费1111和3333项目了。">http://192.168.56.10/buyGoods/则会轮询消费1111和3333项目了。</a></p><p>这样子我们这个单机版下好像解决了锁的问题（本地锁），但是分布式下是锁不住的，因为如果有10个这样的项目，每个项目同时都只有一个线程能运行，那么10个项目则会有10个线程去操作资源，这样还是多线程，会产生线程问题的！</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813111420.png" alt="image-20210813111419751"></p><p>我们可以使用JMeter进行验证</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102180153695.png" alt="image-20220102180153695"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102180330320.png" alt="image-20220102180330320"></p><p>点击运行之后，我们查看项目日志</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102180455302.png" alt="image-20220102180455302"></p><p>可以发现出现了多个商品，卖出去多次的情况，这样显然是不合理的！</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20210813143734.png" alt="image-20210813143732232"></p><p>所以我们则需要去一个统一的地方去管理，像redis、zookeeper、mysql</p><p>为了解决这种情况，我们则需要分布式锁，选择redis，也就是<code>redis分布式锁</code></p><h2 id="3-0（redis分布式锁）"><a href="#3-0（redis分布式锁）" class="headerlink" title="3.0（redis分布式锁）"></a>3.0（redis分布式锁）</h2><p>我们使用redis的<code>set</code>命令进行操作</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102181235578.png" alt="image-20220102181235578"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;  </span><br><span class="line">String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value);</span><br><span class="line">        <span class="comment">//如果已经存在</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//库存数量-1</span></span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="comment">//解锁</span></span><br><span class="line">                stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路其实很简单，首先获取到锁的对象，会在reidis中创建一个键名为<code>REDIS_LOCK</code>的对象，给其设置一个随机值。随后进行操作资源，操作完成后在redis中删除该对象<code>stringRedisTemplate.delete(REDIS_LOCK);</code></p><p>而后面的线程也会进行其操作通过<code>setIfAbsent()</code>，只有redis中没有键名为<code>REDIS_LOCK</code>的对象时才能设置成功，如果redis中已经存在，说明已经有线程获取到了锁，并且没有释放。设置失败则return结束。</p><p>是否还有其他问题出现呢？？</p><p>加入获取锁的线程再运行中<strong>出现了异常</strong>，导致程序没有继续执行下去，从而没有把redis中的<code>REDIS_LOCK</code>给删除，那么后面的其他请求则都不会成功运行！</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102182359065.png" alt="image-20220102182359065"></p><h2 id="4-0（finaly）"><a href="#4-0（finaly）" class="headerlink" title="4.0（finaly）"></a>4.0（finaly）</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102182522902.png" alt="image-20220102182522902"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">            Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value);</span><br><span class="line">            <span class="comment">//如果已经存在</span></span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;抢锁失败!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">                String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">                <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//库存数量-1</span></span><br><span class="line">                    <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                    stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                    System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将从redis删除对象的操作写在finally代码快中，保证最后一定能释放。</p><p>（使用的是synchronized出现异常，jvm会自动释放锁，如果使用的是Lock，则还需要在finally代码快中加入unlock操作释放锁）</p><p>是否还存在着问题呢？？？</p><p>上面我们假设的是程序出现异常，但是如果我们这个项目突然<strong>宕机</strong>了呢？</p><p>例如部署了微服务jar包的机器挂了，代码层面根本没有走到finally这块，就没办法保证解锁，这个key没有被删除，所以我们需要给key设置过期时间</p><h2 id="5-0（key过期时间）"><a href="#5-0（key过期时间）" class="headerlink" title="5.0（key过期时间）"></a>5.0（key过期时间）</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102183241190.png" alt="image-20220102183241190"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">            Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value);</span><br><span class="line">            <span class="comment">//redis设置过期时间</span></span><br><span class="line">            stringRedisTemplate.expire(REDIS_LOCK, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="comment">//如果已经存在</span></span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;抢锁失败!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">                String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">                <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//库存数量-1</span></span><br><span class="line">                    <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                    stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                    System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stringRedisTemplate.expire(REDIS_LOCK, 10L, TimeUnit.SECONDS);</code></p><p>但是这样设置key+过期时间分开了，必须要合并成一行具备原子性。</p><p>否则同样创建为key，项目宕机，同样key不会删除。我们必选要保证创建key和设置key过期时间是原子操作，必须同时成功！</p><h2 id="6-0（key原子性）"><a href="#6-0（key原子性）" class="headerlink" title="6.0（key原子性）"></a>6.0（key原子性）</h2><p><code>Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value, 10L, TimeUnit.SECONDS);</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102183819645.png" alt="image-20220102183819645"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">            Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, value, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="comment">//如果已经存在</span></span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;抢锁失败!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">                String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">                <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//库存数量-1</span></span><br><span class="line">                    <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                    stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                    System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过还是会存在问题….</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102184355346.png" alt="image-20220102184355346"></p><p>假如A线程再设置的10秒钟内没有执行完业务，key被删除后，另一个线程B就能成功设置key，再等待A线程释放锁（等待synchronized代码快外）。A线程执行业务完成后，执行删除key，但是这个key其实不是他创建的key，是B创建的key，A创建的key已经因为到期自动删除了。</p><h2 id="7-0（超时业务-删自己的key）"><a href="#7-0（超时业务-删自己的key）" class="headerlink" title="7.0（超时业务 删自己的key）"></a>7.0（超时业务 删自己的key）</h2><p>所以我们要在删key操作中做判断，判断值是否相等，从而保证在过期时间内只能自己删除自己的key。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220102184912481.png" alt="image-20220102184912481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (stringRedisTemplate.opsForValue().get(REDIS_LOCK).equalsIgnoreCase(value)) &#123;</span><br><span class="line">     <span class="comment">//解锁</span></span><br><span class="line">          stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过还是有原子性的问题，if判断和删除key操作不是原子性的！</p><p>如果判断成功，程序宕机，还是不能删除掉key。所以我们要保证只要进行了value值判断，相同就一定会进行删除key的操作。</p><h2 id="8-0（删除key原子性）"><a href="#8-0（删除key原子性）" class="headerlink" title="8.0（删除key原子性）"></a>8.0（删除key原子性）</h2><p>使用<code>lua</code>脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">20</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, <span class="string">&quot;192.168.56.10&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedisPool) &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Jedispool is not ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220103173958750.png" alt="image-20220103173958750"></p><p>不过还是有问题~</p><p>我们要确保redisLock过期时间大于业务执行时间的问题，Redis分布式锁如何续期？</p><p>还有就是Redis集群环境下，Redis是保证<code>AP</code>，就会出现redis异步复制造成锁的丢失。</p><p>例如：主节点没来的及把刚刚set进来的这条数据给从节点，就挂了。。</p><h2 id="9-0（redisson）"><a href="#9-0（redisson）" class="headerlink" title="9.0（redisson）"></a>9.0（redisson）</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220103183219217.png" alt="image-20220103183219217"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Redisson <span class="title">redisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.56.10:6379&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置注入Redisson</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220103183449535.png" alt="image-20220103183449535"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Redisson redisson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">        RLock redissonLock = redisson.getLock(REDIS_LOCK);</span><br><span class="line">        redissonLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//库存数量-1</span></span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redissonLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单方便了好多。。。还强大~~</p><p>压测请求100之后，非常和谐…</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220103184053412.png" alt="image-20220103184053412"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220103184004965.png" alt="image-20220103184004965"></p><p>不过还是可能出现以上异常，也就是<strong>当前解锁线程不是锁的持有线程</strong></p><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220103184345129.png" alt="image-20220103184345129"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;REDIS_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Redisson redisson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buyGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyGoods</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">        RLock redissonLock = redisson.getLock(REDIS_LOCK);</span><br><span class="line">        redissonLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//get key 查看库存的数量够不够</span></span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//库存数量-1</span></span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (redissonLock.isLocked())&#123;</span><br><span class="line">                <span class="keyword">if</span> (redissonLock.isHeldByCurrentThread())&#123;</span><br><span class="line">                    redissonLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>redissonLock.isLocked()</code>redis是否上锁</li><li><code>redissonLock.isHeldByCurrentThread()</code>当前线程是否是锁的持有线程</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;properties&quot;&gt;&lt;a href=&quot;#properties&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.codekylin.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.codekylin.cn/tags/Redis/"/>
    
      <category term="分布式锁" scheme="https://www.codekylin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>AQS抽象的队列同步器</title>
    <link href="https://www.codekylin.cn/59732.html"/>
    <id>https://www.codekylin.cn/59732.html</id>
    <published>2021-12-26T01:09:03.000Z</published>
    <updated>2022-01-04T07:52:13.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>是用来构建锁或者其他同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的<strong>FIFO队列</strong>来完成资源获取线程的排队工作，并通过一个volatile的int类型变量<strong>state</strong>表示持有锁的状态。</p><p>抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它，如常用的ReentrantLock、Semaphore、CountDownLatch、ReentrantReadWriteLock…</p><blockquote><p>锁，面向锁的使用者</p></blockquote><p>定义了程序员和锁交互的使用层API，隐藏了实现细节，调用即可。</p><blockquote><p>同步器，面向锁的实现者</p></blockquote><p>也就是通过同步器，我们可以实现各种不同的锁。</p><blockquote><p>为什么需要AQS</p></blockquote><p>加锁会导致阻塞，有阻塞就需要排队，实现排队必然需要某种形式的队列来进行管理。</p><p>抢到资源的线程直接使用处理业务逻辑，抢不到资源的必然涉及一种<strong>排队等候机制</strong>。抢占资源失败的线程继续去等待（类似银行业务办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候），但等候线程仍然保留获取锁的可能且获取锁流程仍在继续（候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务）</p><p>既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢?</p><p>如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS的抽象表现。它将请求共享资源的线程封装成队列的节点（Node），通过CAS，自旋以及LockSupport.park()的方式，维护state变量的状态，使并发达到同步的控制效果。</p><p>CLH：Craig、Landin and Hagersten队列，是单向链表，<strong>AQS中的队列是CLH变体的虚拟双向队列（FIFO）</strong>，AQS是通过将每条请求共享资源的线程封装成一个节点来实现锁的分配。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/7132e4cef44c26f62835b197b239147b18062.png" alt="img"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226112141932.png" alt="image-20211226112141932"></p><p>AQS</p><ul><li>同步状态State成员变量</li><li>CLH变体的虚拟双向队列</li></ul><p>State</p><ul><li>0就是没人，自由状态可以办理。</li><li>大于等于1，有人占用窗口，需要排队</li></ul><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226113406835.png" alt="image-20211226113406835"></p><p>总结</p><ol><li>锁会存在阻塞，有阻塞就需要排队，实现排队必然需要队列</li><li>AQS：state变量+CLH变种的双向队列</li></ol><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>首先，我们通过下面的架构图来整体了解一下AQS框架：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/82077ccf14127a87b77cefd1ccf562d3253591.png" alt="img"></p><ul><li>上图中有颜色的为Method，无颜色的为Attribution。</li><li>总的来说，AQS框架共分为五层，自上而下由浅入深，从AQS对外暴露的API到底层基础数据。</li><li>当有自定义同步器接入时，只需重写第一层所需要的部分方法即可，不需要关注底层具体的实现流程。当自定义同步器进行加锁或者解锁操作时，先经过第一层的API进入AQS内部方法，然后经过第二层进行锁的获取，接着对于获取锁失败的流程，进入第三层和第四层的等待队列处理，而这些处理方式均依赖于第五层的基础数据提供层。</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>先来看下AQS中最基本的数据结构——Node，Node即为上面CLH变体队列中的节点。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/960271cf2b5c8a185eed23e98b72c75538637.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus value to indicate successor&#x27;s thread needs unparking */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment">         * unconditionally propagate</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Status field, taking on only the values:</span></span><br><span class="line"><span class="comment">         *   SIGNAL:     The successor of this node is (or will soon be)</span></span><br><span class="line"><span class="comment">         *               blocked (via park), so the current node must</span></span><br><span class="line"><span class="comment">         *               unpark its successor when it releases or</span></span><br><span class="line"><span class="comment">         *               cancels. To avoid races, acquire methods must</span></span><br><span class="line"><span class="comment">         *               first indicate they need a signal,</span></span><br><span class="line"><span class="comment">         *               then retry the atomic acquire, and then,</span></span><br><span class="line"><span class="comment">         *               on failure, block.</span></span><br><span class="line"><span class="comment">         *   CANCELLED:  This node is cancelled due to timeout or interrupt.</span></span><br><span class="line"><span class="comment">         *               Nodes never leave this state. In particular,</span></span><br><span class="line"><span class="comment">         *               a thread with cancelled node never again blocks.</span></span><br><span class="line"><span class="comment">         *   CONDITION:  This node is currently on a condition queue.</span></span><br><span class="line"><span class="comment">         *               It will not be used as a sync queue node</span></span><br><span class="line"><span class="comment">         *               until transferred, at which time the status</span></span><br><span class="line"><span class="comment">         *               will be set to 0. (Use of this value here has</span></span><br><span class="line"><span class="comment">         *               nothing to do with the other uses of the</span></span><br><span class="line"><span class="comment">         *               field, but simplifies mechanics.)</span></span><br><span class="line"><span class="comment">         *   PROPAGATE:  A releaseShared should be propagated to other</span></span><br><span class="line"><span class="comment">         *               nodes. This is set (for head node only) in</span></span><br><span class="line"><span class="comment">         *               doReleaseShared to ensure propagation</span></span><br><span class="line"><span class="comment">         *               continues, even if other operations have</span></span><br><span class="line"><span class="comment">         *               since intervened.</span></span><br><span class="line"><span class="comment">         *   0:          None of the above</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * The values are arranged numerically to simplify use.</span></span><br><span class="line"><span class="comment">         * Non-negative values mean that a node doesn&#x27;t need to</span></span><br><span class="line"><span class="comment">         * signal. So, most code doesn&#x27;t need to check for particular</span></span><br><span class="line"><span class="comment">         * values, just for sign.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * The field is initialized to 0 for normal sync nodes, and</span></span><br><span class="line"><span class="comment">         * CONDITION for condition nodes.  It is modified using CAS</span></span><br><span class="line"><span class="comment">         * (or when possible, unconditional volatile writes).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to predecessor node that current node/thread relies on</span></span><br><span class="line"><span class="comment">         * for checking waitStatus. Assigned during enqueuing, and nulled</span></span><br><span class="line"><span class="comment">         * out (for sake of GC) only upon dequeuing.  Also, upon</span></span><br><span class="line"><span class="comment">         * cancellation of a predecessor, we short-circuit while</span></span><br><span class="line"><span class="comment">         * finding a non-cancelled one, which will always exist</span></span><br><span class="line"><span class="comment">         * because the head node is never cancelled: A node becomes</span></span><br><span class="line"><span class="comment">         * head only as a result of successful acquire. A</span></span><br><span class="line"><span class="comment">         * cancelled thread never succeeds in acquiring, and a thread only</span></span><br><span class="line"><span class="comment">         * cancels itself, not any other node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to the successor node that the current node/thread</span></span><br><span class="line"><span class="comment">         * unparks upon release. Assigned during enqueuing, adjusted</span></span><br><span class="line"><span class="comment">         * when bypassing cancelled predecessors, and nulled out (for</span></span><br><span class="line"><span class="comment">         * sake of GC) when dequeued.  The enq operation does not</span></span><br><span class="line"><span class="comment">         * assign next field of a predecessor until after attachment,</span></span><br><span class="line"><span class="comment">         * so seeing a null next field does not necessarily mean that</span></span><br><span class="line"><span class="comment">         * node is at end of queue. However, if a next field appears</span></span><br><span class="line"><span class="comment">         * to be null, we can scan prev&#x27;s from the tail to</span></span><br><span class="line"><span class="comment">         * double-check.  The next field of cancelled nodes is set to</span></span><br><span class="line"><span class="comment">         * point to the node itself instead of null, to make life</span></span><br><span class="line"><span class="comment">         * easier for isOnSyncQueue.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The thread that enqueued this node.  Initialized on</span></span><br><span class="line"><span class="comment">         * construction and nulled out after use.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to next node waiting on condition, or the special</span></span><br><span class="line"><span class="comment">         * value SHARED.  Because condition queues are accessed only</span></span><br><span class="line"><span class="comment">         * when holding in exclusive mode, we just need a simple</span></span><br><span class="line"><span class="comment">         * linked queue to hold nodes while they are waiting on</span></span><br><span class="line"><span class="comment">         * conditions. They are then transferred to the queue to</span></span><br><span class="line"><span class="comment">         * re-acquire. And because conditions can only be exclusive,</span></span><br><span class="line"><span class="comment">         * we save a field by using special value to indicate shared</span></span><br><span class="line"><span class="comment">         * mode.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node nextWaiter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns true if node is waiting in shared mode.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns previous node, or throws NullPointerException if null.</span></span><br><span class="line"><span class="comment">         * Use when predecessor cannot be null.  The null check could</span></span><br><span class="line"><span class="comment">         * be elided, but is present to help the VM.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the predecessor of this node</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">            Node p = prev;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">            <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">            <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解释一下几个方法和属性值的含义：</p><table><thead><tr><th align="left">方法和属性值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">waitStatus</td><td align="left">当前节点在队列中的状态</td></tr><tr><td align="left">thread</td><td align="left">表示处于该节点的线程</td></tr><tr><td align="left">prev</td><td align="left">前驱指针</td></tr><tr><td align="left">predecessor</td><td align="left">返回前驱节点，没有的话抛出空指针异常</td></tr><tr><td align="left">nextWaiter</td><td align="left">指向下一个处于CONDITION状态的节点（由于本篇文章不讲述Condition Queue队列，这个指针不多介绍）</td></tr><tr><td align="left">next</td><td align="left">后继指针</td></tr></tbody></table><p>线程两种锁的模式：</p><table><thead><tr><th align="left">模式</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">SHARED</td><td align="left">表示线程以共享的模式等待锁</td></tr><tr><td align="left">EXCLUSIVE</td><td align="left">表示线程正在以独占的方式等待锁</td></tr></tbody></table><p>waitStatus有下面几个枚举值：</p><table><thead><tr><th align="left">枚举</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">当一个Node被初始化的时候的默认值</td></tr><tr><td align="left">CANCELLED</td><td align="left">为1，表示线程获取锁的请求已经取消了</td></tr><tr><td align="left">CONDITION</td><td align="left">为-2，表示节点在等待队列中，节点线程等待唤醒</td></tr><tr><td align="left">PROPAGATE</td><td align="left">为-3，当前线程处在SHARED情况下，该字段才会使用</td></tr><tr><td align="left">SIGNAL</td><td align="left">为-1，表示线程已经准备好了，就等资源释放了</td></tr></tbody></table><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226114029036.png" alt="image-20211226114029036"></p><h3 id="同步状态State"><a href="#同步状态State" class="headerlink" title="同步状态State"></a>同步状态State</h3><p>在了解数据结构后，接下来了解一下AQS的同步状态——State。AQS中维护了一个名为state的字段，意为同步状态，是由Volatile修饰的，用于展示当前临界资源的获锁情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure><p>下面提供了几个访问这个字段的方法：</p><table><thead><tr><th align="left">方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">protected final int getState()</td><td align="left">获取State的值</td></tr><tr><td align="left">protected final void setState(int newState)</td><td align="left">设置State的值</td></tr><tr><td align="left">protected final boolean compareAndSetState(int expect, int update)</td><td align="left">使用CAS方式更新State</td></tr></tbody></table><p>这几个方法都是Final修饰的，说明子类中无法重写它们。我们可以通过修改State字段表示的同步状态来实现多线程的独占模式和共享模式（加锁过程）。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/27605d483e8935da683a93be015713f331378.png" alt="img"></p><p>对于我们自定义的同步工具，需要自定义获取同步状态和释放状态的方式，也就是AQS架构图中的第一层：API层。</p><h3 id="AQS重要方法与ReentrantLock的关联"><a href="#AQS重要方法与ReentrantLock的关联" class="headerlink" title="AQS重要方法与ReentrantLock的关联"></a>AQS重要方法与ReentrantLock的关联</h3><p>从架构图中可以得知，AQS提供了大量用于自定义同步器实现的Protected方法。自定义同步器实现的相关方法也只是为了通过修改State字段来实现多线程的独占模式或者共享模式。自定义同步器需要实现以下方法（ReentrantLock需要实现的方法如下，并不是全部）：</p><table><thead><tr><th align="left">方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">protected boolean isHeldExclusively()</td><td align="left">该线程是否正在独占资源。只有用到Condition才需要去实现它。</td></tr><tr><td align="left">protected boolean tryAcquire(int arg)</td><td align="left">独占方式。arg为获取锁的次数，尝试获取资源，成功则返回True，失败则返回False。</td></tr><tr><td align="left">protected boolean tryRelease(int arg)</td><td align="left">独占方式。arg为释放锁的次数，尝试释放资源，成功则返回True，失败则返回False。</td></tr><tr><td align="left">protected int tryAcquireShared(int arg)</td><td align="left">共享方式。arg为获取锁的次数，尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</td></tr><tr><td align="left">protected boolean tryReleaseShared(int arg)</td><td align="left">共享方式。arg为释放锁的次数，尝试释放资源，如果释放后允许唤醒后续等待结点返回True，否则返回False。</td></tr></tbody></table><p>一般来说，自定义同步器要么是独占方式，要么是共享方式，它们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可。AQS也支持自定义同步器同时实现独占和共享两种方式，如ReentrantReadWriteLock。ReentrantLock是独占锁，所以实现了tryAcquire-tryRelease。</p><p>以非公平锁为例，这里主要阐述一下非公平锁与AQS之间方法的关联之处，具体每一处核心方法的作用会在文章后面详细进行阐述。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/b8b53a70984668bc68653efe9531573e78636.png" alt="img"></p><p>为了帮助大家理解ReentrantLock和AQS之间方法的交互过程，以非公平锁为例，我们将加锁和解锁的交互流程单独拎出来强调一下，以便于对后续内容的理解。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/7aadb272069d871bdee8bf3a218eed8136919.png" alt="img"></p><p>加锁：</p><ul><li>通过ReentrantLock的加锁方法Lock进行加锁操作。</li><li>会调用到内部类Sync的Lock方法，由于Sync#lock是抽象方法，根据ReentrantLock初始化选择的公平锁和非公平锁，执行相关内部类的Lock方法，本质上都会执行AQS的Acquire方法。</li><li>AQS的Acquire方法会执行tryAcquire方法，但是由于tryAcquire需要自定义同步器实现，因此执行了ReentrantLock中的tryAcquire方法，由于ReentrantLock是通过公平锁和非公平锁内部类实现的tryAcquire方法，因此会根据锁类型不同，执行不同的tryAcquire。</li><li>tryAcquire是获取锁逻辑，获取失败后，会执行框架AQS的后续逻辑，跟ReentrantLock自定义同步器无关。</li></ul><p>解锁：</p><ul><li>通过ReentrantLock的解锁方法Unlock进行解锁。</li><li>Unlock会调用内部类Sync的Release方法，该方法继承于AQS。</li><li>Release中会调用tryRelease方法，tryRelease需要自定义同步器实现，tryRelease只在ReentrantLock中的Sync实现，因此可以看出，释放锁的过程，并不区分是否为公平锁。</li><li>释放成功后，所有处理由AQS框架完成，与自定义同步器无关。</li></ul><p>通过上面的描述，大概可以总结出ReentrantLock加锁解锁时API层核心方法的映射关系。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/f30c631c8ebbf820d3e8fcb6eee3c0ef18748.png" alt="img"></p><h3 id="通过ReentrantLock理解AQS"><a href="#通过ReentrantLock理解AQS" class="headerlink" title="通过ReentrantLock理解AQS"></a>通过ReentrantLock理解AQS</h3><p>ReentrantLock中公平锁和非公平锁在底层是相同的，这里以非公平锁为例进行分析。</p><p>在非公平锁中，有一段这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sync object for non-fair locks</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">     * acquire on failure.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下这个Acquire是怎么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Acquire中调用了<code>tryAcquire()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这里只是AQS的简单实现，具体获取锁的实现方法是由各自的公平锁和非公平锁单独实现的（以ReentrantLock为例）。如果该方法返回了True，则说明当前线程获取锁成功，就不用往后执行了；如果获取失败，就需要加入到等待队列中。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226144342912.png" alt="image-20211226144342912"></p><p>非公平锁和公平锁的tryAcquire()方法的实现代码，其实差别就在于非公平锁获取锁时比公平锁少了一个判断<code>!hasQueuedPredecessors()</code></p><p><code>hasQueuedPredecessors()</code>中判断了是否需要排队，导致公平锁和非公平锁的差异如下：</p><p>公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中。</p><p>非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226152202628.png" alt="image-20211226152202628"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AQSDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------A thread come in&quot;</span>);</span><br><span class="line">                <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------B thread come in&quot;</span>);</span><br><span class="line">                <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------C thread come in&quot;</span>);</span><br><span class="line">                <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设有三个人去银行办理业务，第一个的A前面没有人，首先办理业务。调用<code>lock()</code>方法</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226152336696.png" alt="image-20211226152336696"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会使用<code>compareAndSetState(0, 1)</code>方法进行判断</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226152507193.png" alt="image-20211226152507193"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">       <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由于目前A是第一个办理业务的，也就是第一个获取锁人。此时state值还是为默认值0，通过CAS操作将其成功更新为<code>1</code>。返回<code>true</code>。进入到If判断中</p><p>调用<code>setExclusiveOwnerThread(Thread.currentThread());</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226152912624.png" alt="image-20211226152912624"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the thread that currently owns exclusive access.</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@code</span> null&#125; argument indicates that no thread owns access.</span></span><br><span class="line"><span class="comment"> * This method does not otherwise impose any synchronization or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> volatile&#125; field accesses.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> thread the owner thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setExclusiveOwnerThread</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">    exclusiveOwnerThread = thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将当前线程设置为独占访问权限的线程，也就是当前线程持有了这把锁。</p><p>到此lock方法就结束了，A线程暂停2秒钟。B线程开始运行调用lock方法。</p><p>此时<code>state</code>已经被设置为了<code>1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以不满足判断条件。则运行 <code>acquire(1)</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226155842888.png" alt="image-20211226155842888"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用<code>!tryAcquire(1)</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226160105191.png" alt="image-20211226160105191"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非公平锁调用<code>nonfairTryAcquire(1)</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226160421387.png" alt="image-20211226160421387"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一个if条件<code>c==0</code>，此时为1不满足</li><li>第二个if条件<code>current == getExclusiveOwnerThread()</code>当前访问独占权限的线程是A，不是B。也不满足</li><li>所以直接返回false</li></ul><blockquote><p>第一个if条件c == 0什么时候满足呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                 setExclusiveOwnerThread(current);</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>其实就是当B线程运行<code>tryAcquire()</code>方法时，A线程刚好完成，释放了锁，将<code>state</code>设置为了<code>0</code>。满足条件，CAS将state设置为<code>1</code>，设置当前访问独占权限的线程为B。返回<code>true</code>。<code>!nonfairTryAcquire(1)</code>为false不满足条件<code>acquire(1)</code>方法结束。<code>lock()</code>成功!</p><blockquote><p>第二个if条件current == getExclusiveOwnerThread()什么时候满足呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">          <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">          <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">          setState(nextc);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>当此时还是A线程，也就是前访问独占权限的线程尝试获取锁时满足条件。</p><p>此时</p><ul><li><code>nextc = c + acquires</code></li><li><code>c=state=1</code></li><li><code>acquires=1</code></li><li><code>nextc=2</code></li><li><code>setState(nextc);</code>设置state为2</li></ul><p>将state设置为<code>2</code>，返回<code>true</code>。这也就是为什么<code>ReentrantLock</code>为<code>可重入锁</code>。<code>!nonfairTryAcquire(1)</code>为false不满足条件<code>acquire(1)</code>方法结束。<code>lock()</code>成功!</p><p>我们接着当前的正常逻辑，回到<code>acquire(1)</code>方法</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226160736984.png" alt="image-20211226160736984"></p><p><code>tryAcquire(1)</code>返回<code>false</code>，取否变成<code>true</code>所以接着运行<code>acquireQueued(addWaiter(Node.EXCLUSIVE), 1))</code></p><p>首先查看<code>addWaiter(Node.EXCLUSIVE)</code>加入等待队列中</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226170238746.png" alt="image-20211226170238746"></p><p><code>static final Node EXCLUSIVE = null;</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226170313810.png" alt="image-20211226170313810"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226171522045.png" alt="image-20211226171522045"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">    <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">    <span class="keyword">this</span>.thread = thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的流程如下：</p><ul><li>通过当前的线程和锁模式新建一个节点。</li><li>Pred指针指向尾节点Tail。</li><li>将New中Node的Prev指针指向Pred。</li><li>通过compareAndSetTail方法，完成尾节点的设置。这个方法主要是对tailOffset和Expect进行比较，如果tailOffset的Node和Expect的Node地址是相同的，那么设置Tail的值为Update的值。</li></ul><p>当前模式为独占模式值<code>mode</code>值为<code>null</code></p><blockquote><p>如果Pred指针是Null（说明等待队列中没有元素），或者当前Pred指针和Tail指向的位置不同（说明被别的线程已经修改），就需要看一下Enq的方法。</p></blockquote><p>由于当前等待队列中没有线程进行排队，<code>tail</code>为<code>null</code>所以<code>pred=null</code>不满足if条件，运行<code>enq(node)</code>将节点入队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Node t = tail</code>tail为<code>null</code>,满足if条件，调用<code>compareAndSetHead(new Node())</code>CAS设置队列头节点。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211226172258714.png" alt="image-20211226172258714"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetHead</span><span class="params">(Node update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当期望值为null，也就是只有头节点为null时才能设置成功</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, headOffset, <span class="keyword">null</span>, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果没有被初始化，需要进行初始化一个头结点出来。但请注意，初始化的头结点并不是当前线程节点，而是调用了无参构造函数的节点。如果经历了初始化或者并发导致队列中有元素，则与之前的方法相同。其实，addWaiter就是一个在双端链表添加尾节点的操作，需要注意的是，双端链表的头结点是一个无参构造函数的头结点。</p></blockquote><p>此时头节点head为<code>null</code>，创建一个新节点Node设置为头节点，成功返回<code>true</code>将<code>tail = head;</code>头节点赋值给尾节点。第一个节点头节点，是创建的哨兵节点（虚拟头节点）。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="D:%5CFiles%5CBlog_Images%5CAQS%E6%8A%BD%E8%B1%A1%E7%9A%84%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8%5Cimage-20211227215702607.png" alt="image-20211227215702607"></p><p>由于<code>for (;;)</code>所以接着循环此时<code>t==null</code>不成立，<code>node.prev = t;</code>将B的前驱指向尾节点（此时尾节点）。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211227220207554.png" alt="image-20211227220207554"></p><p><code>compareAndSetTail(t, node)</code>接着通过CAS操作将尾节点设置为了<code>node</code>也就是B。接着将<code>t.next=node</code>将其后继结点指向node即B。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211227221619148.png" alt="image-20211227221619148"></p><p>然后结束循环，回到<code>addWaiter()</code>,运行<code>return node</code>也就是将B节点返回出去。此时回到<code>acquire(1)</code>中，执行<code>acquireQueued(B,1))</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229213344336.png" alt="image-20211229213344336"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229213503044.png" alt="image-20211229213503044"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入循环<code>final Node p = node.predecessor();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns previous node, or throws NullPointerException if null.</span></span><br><span class="line"><span class="comment"> * Use when predecessor cannot be null.  The null check could</span></span><br><span class="line"><span class="comment"> * be elided, but is present to help the VM.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the predecessor of this node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">    Node p = prev;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回当前节点的前节点，也就是B的前节点，即<code>head</code>头节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">             setHead(node);</span><br><span class="line">             p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">             failed = <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">return</span> interrupted;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>此时<code>p==head</code>满足，再次<code>tryAcquire(arg)</code>尝试获取锁，获取成功的话</p><p>则<code>setHead(node);</code>将B设置为新的头节点。而以前的头节点<code>p.next</code></p><p>将其后节点指针设置为null（便于GC）返回<code>interrupted</code>false。结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    head = node;</span><br><span class="line">    node.thread = <span class="keyword">null</span>;</span><br><span class="line">    node.prev = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不满足<code>p == head &amp;&amp; tryAcquire(arg)</code>则进入下一个判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">        parkAndCheckInterrupt())</span><br><span class="line">        interrupted = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>shouldParkAfterFailedAcquire(p, node)</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229220356776.png" alt="image-20211229220356776"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">         * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class="line"><span class="comment">         * indicate retry.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">         * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>int ws = pred.waitStatus;</code>此时pred代表头节点，ws值为初始值<code>0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">            * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">            * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><code>compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</code>此时将前节点pred也就是头节点的<code>waitStatus</code>值CAS操作成了<code>Node.SIGNAL</code>也就是<code>-1</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229220755241.png" alt="image-20211229220755241"></p><p>接着返回<code>false</code>。回到<code>acquireQueued()</code>方法，并没有结束循环，再次循环运行</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229221036238.png" alt="image-20211229221036238"></p><p>接着再度运行<code>shouldParkAfterFailedAcquire(p, node)</code>，此时</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229221210712.png" alt="image-20211229221210712"></p><p>头节点<code>pred</code>的<code>waitStatus== Node.SIGNAL</code>进入<code>return true</code></p><p>就能运行<code>parkAndCheckInterrupt())</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229221346536.png" alt="image-20211229221346536"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convenience method to park and then check if interrupted</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if interrupted</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用改方法，运行<code>LockSupport.park(this);</code>暂停该线程。返回<code>Thread.interrupted();</code>，线程暂停成功则返回<code>true</code>。线程B暂停，等待唤醒…….(方法并没有结束，只是暂停了，唤醒之后继续运行)</p><p>此时A线程终于<code>unlock()</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229222141983.png" alt="image-20211229222141983"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     sync.release(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229222313708.png" alt="image-20211229222313708"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>tryRelease(1)</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229222400872.png" alt="image-20211229222400872"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>getState()</code>state的值为<code>1</code></p><p><code>int c = getState() - releases;</code>等于1-1为<code>0</code></p><p><code>if (Thread.currentThread() != getExclusiveOwnerThread())</code></p><p>如果当前解锁线程不是锁的持有者，则抛出<code>IllegalMonitorStateException</code>异常。</p><p>如果<code>c==0</code>则进判断</p><ul><li>设置<code>free=true</code></li><li><code>setExclusiveOwnerThread(null);</code>独占线程（锁拥有者）为null</li><li><code>setState(c);</code>变为0</li><li>返回free，也就是true</li></ul><p>如果<code>c!=0</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229222934762.png" alt="image-20211229222934762"></p><p>在<code>nonfairTryAcquire()</code>中嵌入式锁中给该值进行过，加值操作。此时只释放了一次，假设进行了两次<code>lock</code>,则设置新的state值，也就是<code>1</code>,返回<code>false</code>。结束。锁还没有释放，需要该线程再度<code>unlock()</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229224017091.png" alt="image-20211229224017091"></p><p>锁的嵌入式情况，此时lockMethod2()的unlock</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211229224137285.png" alt="image-20211229224137285"></p><p>解锁了一次，之后state变成了1，还需要lockMethod2()的unlock，才能真正释放锁。</p><p>回到主流程，A线程unlock释放锁，<code>tryRelease</code>成功返回true，state变成了0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">    Node h = head;</span><br><span class="line">    <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">        unparkSuccessor(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>h != null &amp;&amp; h.waitStatus != 0</code></p><ul><li>头节点h不等于null，为哨兵节点。</li><li>waitStatus在前面B节点等待的时候使用<code>compareAndSetWaitStatus()</code>变成了<code>-1</code></li></ul><p>进入判断调用<code>unparkSuccessor(h);</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220101202314582.png" alt="image-20220101202314582"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wakes up node&#x27;s successor, if one exists.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">     * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">     * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">     * non-cancelled successor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>int ws = node.waitStatus;</code>头节点的waitStatus为<code>-1</code>小于0，调用</p><p><code>compareAndSetWaitStatus(node, ws, 0);</code>将其又变成了<code>0</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211227221619148.png" alt="image-20211227221619148"></p><p>接着<code>Node s = node.next</code>头节点下一个节点也就是B，<code>if (s == null || s.waitStatus &gt; 0)</code></p><ul><li>B节点不等于null</li><li>B节点的waitStatus等于0，不满足大于0</li></ul><p><code>if (s != null)</code>满足后，调用<code>LockSupport.unpark(s.thread);</code>此时A的<code>unlock()</code>也就执行完成了。B线程被唤醒。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220101203436838.png" alt="image-20220101203436838"></p><p>此时B线程被唤醒继续执行代码将<code>interrupted = true;</code>设置为true，接着继续遍历循环，<code>final Node p = node.predecessor();</code>B的前驱节点p为head，执行<code>tryAcquire(arg)</code>此时由于没用了A线程持有锁，B线程获取到了锁，满足条件，调用<code>setHead(node)</code>方法，将B节点的属性赋值给头节点（B此时也就是new Node()）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    head = node;</span><br><span class="line">    node.thread = <span class="keyword">null</span>;</span><br><span class="line">    node.prev = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实也就是搞了一个新的哨兵节点(watiStatus=0,thread=0,next则没用改变，如果还有C的话，还是指向C的)，将原先指向头节点的前指针为null,</p><p>接着<code>p.next = null;</code>原先的头节点再也没用任何指针指向，会被GC掉。</p><p><code>failed=false</code>返回interrupted也就是<code>ture</code></p><p>接着<code>if (!tryAcquire(arg) &amp;&amp;    acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code>满足判断</p><p>调用<code>selfInterrupt();</code></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220101210117318.png" alt="image-20220101210117318"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selfInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220101210210755.png" alt="image-20220101210210755"></p><p>其实B线程唤醒后，应该是从这里再继续执行。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20220101205936259.png" alt="image-20220101205936259"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    setBlocker(t, blocker);</span><br><span class="line">    UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setBlocker(t, null);</code>设置blocket为<code>null</code></p><p>所以<code>Interruptible b = blocker;</code> b为null不满足条件，没有中断线程B，只是<code>interrupt0();</code>设置 <code>interrupt flag</code>为false。到此结束。</p><blockquote><p>但为什么获取了锁以后还要中断线程呢？这部分属于Java提供的协作式中断知识内容，感兴趣同学可以查阅一下。这里简单介绍一下：</p></blockquote><ol><li>当中断线程被唤醒时，并不知道被唤醒的原因，可能是当前线程在等待中被中断，也可能是释放了锁以后被唤醒。因此我们通过Thread.interrupted()方法检查中断标记（该方法返回了当前线程的中断状态，并将当前线程的中断标识设置为False），并记录下来，如果发现该线程被中断过，就再中断一次。</li><li>线程在等待资源的过程中被唤醒，唤醒后还是会不断地去尝试获取锁，直到抢到锁为止。也就是说，在整个流程中，并不响应中断，只是记录中断记录。最后抢到锁返回了，那么如果被中断过的话，就需要补充一次中断。</li></ol><p>这里的处理方式主要是运用线程池中基本运作单元Worder中的runWorker，通过Thread.interrupted()进行额外的判断处理，感兴趣的可以看下ThreadPoolExecutor源码。</p><h3 id="JUC中的应用场景"><a href="#JUC中的应用场景" class="headerlink" title="JUC中的应用场景"></a>JUC中的应用场景</h3><p>除了上边ReentrantLock的可重入性的应用，AQS作为并发编程的框架，为很多其他同步工具提供了良好的解决方案。下面列出了JUC中的几种同步工具，大体介绍一下AQS的应用场景：</p><table><thead><tr><th align="left">同步工具</th><th align="left">同步工具与AQS的关联</th></tr></thead><tbody><tr><td align="left">ReentrantLock</td><td align="left">使用AQS保存锁重复持有的次数。当一个线程获取锁时，ReentrantLock记录当前获得锁的线程标识，用于检测是否重复获取，以及错误线程试图解锁操作时异常情况的处理。</td></tr><tr><td align="left">Semaphore</td><td align="left">使用AQS同步状态来保存信号量的当前计数。tryRelease会增加计数，acquireShared会减少计数。</td></tr><tr><td align="left">CountDownLatch</td><td align="left">使用AQS同步状态来表示计数。计数为0时，所有的Acquire操作（CountDownLatch的await方法）才可以通过。</td></tr><tr><td align="left">ReentrantReadWriteLock</td><td align="left">使用AQS同步状态中的16位保存写锁持有的次数，剩下的16位用于保存读锁的持有次数。</td></tr><tr><td align="left">ThreadPoolExecutor</td><td align="left">Worker利用AQS同步状态实现对独占线程变量的设置（tryAcquire和tryRelease）。</td></tr></tbody></table><h3 id="自定义同步工具"><a href="#自定义同步工具" class="headerlink" title="自定义同步工具"></a>自定义同步工具</h3><p>了解AQS基本原理以后，按照上面所说的AQS知识点，自己实现一个同步工具。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;是用来构建锁或者其他同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的&lt;strong&gt;FIFO队列&lt;/strong&gt;来完成资源获取
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.codekylin.cn/categories/Java/"/>
    
      <category term="JUC" scheme="https://www.codekylin.cn/categories/Java/JUC/"/>
    
    
      <category term="JUC" scheme="https://www.codekylin.cn/tags/JUC/"/>
    
      <category term="AQS" scheme="https://www.codekylin.cn/tags/AQS/"/>
    
  </entry>
  
  <entry>
    <title>LockSupport详解</title>
    <link href="https://www.codekylin.cn/20208.html"/>
    <id>https://www.codekylin.cn/20208.html</id>
    <published>2021-12-25T09:21:04.000Z</published>
    <updated>2022-01-04T07:52:33.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225174538717.png" alt="image-20211225174538717"></p><p>LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。</p><p>LockSupport中的<code>park()</code>和<code>unpark()</code>的作用分别是阻塞线程和解除阻塞线程。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>三种让线程等待和唤醒的方法</p><ol><li>synchronized+wait+notify</li><li>lock+await+signal</li><li>LockSupport+park+unpark</li></ol><p><a href="https://codekylin.cn/28239.html">JUC之synchronized和Lock | Kylin (codekylin.cn)</a></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/20200924161719.png" alt="synchronized和lock"></p><ol><li>使用Object中的<code>wait()</code>方法让线程等待，使用Object中的<code>notify()</code>方法唤醒线程。</li><li>使用JUC包中的Condition的<code>await()</code>方法让线程等待，使用<code>signal()</code>方法唤醒线程。</li><li>LockSupport类可以阻塞当前线程已经唤醒指定被阻塞的线程。</li></ol><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225180951299.png" alt="image-20211225180951299"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---------被唤醒&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A线程让线程暂停，B线程唤醒A线程执行。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225181056398.png" alt="image-20211225181056398"></p><p>此时一切正常。接着把同步代码快注释</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225181252637.png" alt="image-20211225181252637"></p><p>运行抛出<code>java.lang.IllegalMonitorStateException</code>异常。说明<code>wait</code>和<code>notify</code>是无法单独脱离<code>synchronized</code>使用的。</p><p>接着我们让A线程运行先暂停3秒钟，确保B线程先运行。也就是notify和wait先后过程调换，先notify再wait。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225181928899.png" alt="image-20211225181928899"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//暂停3秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---------被唤醒&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A线程暂停3秒钟，确保B线程先执行notify方法。B线程先notify（此时没有线程被暂停，没有唤醒任何线程），3秒钟过后，A线程继续执行，阻塞等待。一直没有线程将其唤醒。程序一直运行….</p><p>总结</p><ol><li>wait和notify方法必选要再同步代码快或者同步方法里面而且成对出现使用</li><li>遵循先wait后notify</li></ol><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225200739715.png" alt="image-20211225200739715"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------come in&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.signal();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------通知&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将lock的<code>lock</code>和<code>unlock</code>操作注释。运行代码</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225200915312.png" alt="image-20211225200915312"></p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225200952866.png" alt="image-20211225200952866"></p><p>同样运行抛出<code>java.lang.IllegalMonitorStateException</code>异常</p><p>接着我们同样是A线程先暂停3秒钟，确保B线程先运行，通知唤醒。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225201235308.png" alt="image-20211225201235308"></p><p>同样程序处于一直运行状态，A线程没有被唤醒。</p><p>这和使用<code>synchronized</code>是一样的问题，只不过对应Api有所区分。</p><p>传统的synchronized和Lock实现等待唤醒通知的约束</p><ul><li>线程先要获得并持有锁，必须在锁块（synchronized或lock）中</li><li>必须要先等待后唤醒，线程才能够被唤醒</li></ul><h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><p>通过<code>park()</code>和<code>unpark(thread)</code>方法来实现阻塞和唤醒线程的操作</p><p>LockSupport类使用一种名为<code>Permit</code>（许可）的概念来做到阻塞和唤醒线程的功能，每个线程都有一个许可(permit)，permit只有两个值1和0，默认是零。</p><p>可以把许可看成是一种(0,1)信号量（Semaphore）,但与Semaphore不同的是，许可的累加上限是1。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225204613398.png" alt="image-20211225204613398"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------come in&quot;</span>);</span><br><span class="line">            <span class="comment">//被阻塞...等地啊通知等待放行，它要通过需要许可证</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------被唤醒&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line"></span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//唤醒A线程</span></span><br><span class="line">            LockSupport.unpark(a);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------通知&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着同样是A线程暂停3秒钟，确保B线程先执行唤醒操作。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225204804986.png" alt="image-20211225204804986"></p><p>并没有出现抛出异常的情况，B线程运行3秒钟后，A线程正常运行，并被正常唤醒。</p><p>通过以上代码可以看出，LockSupport不需要同步代码块之类的前提，同时也支持先唤醒后等待这种操作。（先唤醒，后面的等待操作就没有用了，相当于抵消了）</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>LockSupport是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。总之，LockSupport调用的Unsafe中的native代码。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225205711360.png" alt="image-20211225205711360"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225205750274.png" alt="image-20211225205750274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">        UNSAFE.unpark(thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LockSupport提供park()和unpark()方法来实现阻塞线程和解除线程阻塞的过程。</p><p>LockSupport和每个使用它的线程都有一个许可(permit)关联。permit相当于1，0的开关，默认是0。</p><p>调用一次unpark就加1，变成1。</p><p>调用一次park会消费permit，也就是将1变成0，同时park立即返回。</p><p>如再次调用park会变成阻塞（因为permit为零了会阻塞在这里，一直到permit变为1），这时调用unpark会把permit置为1。</p><p>每个线程都有一个相关的permit，permit最多只有一个，重复调用unpark也不会积累凭证。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211225210948916.png" alt="image-20211225210948916"></p><ol><li>A线程运行首先使用park()，将线程阻塞，permit为0。</li><li>B线程调用unpark(a)两次，permit由0+1=1变成了1，不能积累。</li><li>A线程不唤醒，再次调用park()，将线程阻塞，permit为0。没有唤醒操作，程序一直运行…</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//try &#123;</span></span><br><span class="line">            <span class="comment">//    TimeUnit.SECONDS.sleep(3);</span></span><br><span class="line">            <span class="comment">//&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">            <span class="comment">//    e.printStackTrace();</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------come in&quot;</span>);</span><br><span class="line">            <span class="comment">//被阻塞...等地啊通知等待放行，它要通过需要许可证</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------被唤醒&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line"></span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//唤醒A线程</span></span><br><span class="line">            LockSupport.unpark(a);</span><br><span class="line">            LockSupport.unpark(a);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------通知&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程阻塞需要消耗凭证（permit），这个凭证最多只有一个。</p><p>当调用park方法时</p><ul><li>如果有凭证，则会直接消耗掉这个凭证然后正常退出</li><li>如果无凭证，就必选阻塞等待凭证可用</li></ul><p>而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。</p><blockquote><p>为什么可以先唤醒线程后阻塞线程？</p></blockquote><p>因为unpark获得一个凭证，之后调用park方法，就可以名正言顺的凭证消费，故不会阻塞。</p><blockquote><p>为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程？</p></blockquote><p>因为凭证的数量最多为1，连续调用两次unpark和调用一次unpark效果一样，只会增加一个凭证。而调用两次park却需要消耗两个凭证，证不够，不能放行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;img src= &quot;https://gitee.com/kylincw/images/raw/master/loading.gif&quot; da
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.codekylin.cn/categories/Java/"/>
    
      <category term="JUC" scheme="https://www.codekylin.cn/categories/Java/JUC/"/>
    
    
      <category term="JUC" scheme="https://www.codekylin.cn/tags/JUC/"/>
    
      <category term="LockSupport" scheme="https://www.codekylin.cn/tags/LockSupport/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合shiro</title>
    <link href="https://www.codekylin.cn/25809.html"/>
    <id>https://www.codekylin.cn/25809.html</id>
    <published>2021-12-15T13:10:18.000Z</published>
    <updated>2021-12-25T13:31:34.443Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/img/image-20211215211130028.png" alt="image-20211215211130028"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>引入shiro依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入shiro整合springboot依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1.创建配置类"></a>1.创建配置类</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/img/image-20211216150841438.png" alt="image-20211216150841438"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来整合shiro相关的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建shiroFilter 负责拦截所有请求</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建安全管理器 web环境下</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(Realm realm)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建自定义realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置shiroFilterFactoryBean"><a href="#2-配置shiroFilterFactoryBean" class="headerlink" title="2.配置shiroFilterFactoryBean"></a>2.配置shiroFilterFactoryBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给filter设置安全管理器</span></span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置系统受限资源</span></span><br><span class="line">    <span class="comment">//配置系统公告资源</span></span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//map.put(&quot;/index.jsp&quot;,&quot;authc&quot;);//authc 请求这个资源需要认证和授权</span></span><br><span class="line">    map.put(<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/user/register&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/user/getImage&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/register.jsp&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);<span class="comment">//authc 请求这个资源需要认证和授权</span></span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认认证界面路径</span></span><br><span class="line">    <span class="comment">//shiroFilterFactoryBean.setLoginUrl(&quot;/login.jsp&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</code></p><p>配置系统公共、受限资源</p><ul><li>anon 公共</li><li>authc 受限</li></ul><p>一般<code>map.put(&quot;/**&quot;, &quot;authc&quot;)</code>将所有资源拦截，然后主要配置放行不需要受限的资源。</p><blockquote><p>常见过滤器</p></blockquote><p>注意: <strong>shiro提供和多个默认的过滤器，我们可以用这些过滤器来配置控制指定url的权限：</strong></p><table><thead><tr><th>配置缩写</th><th>对应的过滤器</th><th>功能</th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>指定url可以匿名访问</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>指定url需要form表单登录，默认会从请求中获取<code>username</code>、<code>password</code>,<code>rememberMe</code>等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录逻辑的，自己写的话出错返回的信息都可以定制嘛。</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>指定url需要basic登录</td></tr><tr><td>logout</td><td>LogoutFilter</td><td>登出过滤器，配置指定url就可以实现退出功能，非常方便</td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>禁止创建会话</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>需要指定权限才能访问</td></tr><tr><td>port</td><td>PortFilter</td><td>需要指定端口才能访问</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>将http请求方法转化成相应的动词来构造一个权限字符串，这个感觉意义不大，有兴趣自己看源码的注释</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>需要指定角色才能访问</td></tr><tr><td>ssl</td><td>SslFilter</td><td>需要https请求才能访问</td></tr><tr><td>user</td><td>UserFilter</td><td>需要已登录或“记住我”的用户才能访问</td></tr></tbody></table><h3 id="3-配置WebSecurityManager"><a href="#3-配置WebSecurityManager" class="headerlink" title="3.配置WebSecurityManager"></a>3.配置WebSecurityManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getSecurityManager</span><span class="params">(Realm realm)</span></span>&#123;</span><br><span class="line">  DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">  defaultWebSecurityManager.setRealm(realm);</span><br><span class="line">  <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建自定义realm"><a href="#4-创建自定义realm" class="headerlink" title="4.创建自定义realm"></a>4.创建自定义realm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自定义realm</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CustomerRealm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认证实现"><a href="#认证实现" class="headerlink" title="认证实现"></a>认证实现</h2><h3 id="1-编写login-jsp"><a href="#1-编写login-jsp" class="headerlink" title="1.编写login.jsp"></a>1.编写login.jsp</h3><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/img/image-20211216152502108.png" alt="image-20211216152502108"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  密码  : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-开发controller"><a href="#2-开发controller" class="headerlink" title="2.开发controller"></a>2.开发controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用来处理身份认证</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取主体对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      subject.login(<span class="keyword">new</span> UsernamePasswordToken(username,password));</span><br><span class="line">      <span class="keyword">return</span>  <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">&quot;用户名错误!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">&quot;密码错误!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-开发realm"><a href="#3-开发realm" class="headerlink" title="3.开发realm"></a>3.开发realm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;kylin&quot;</span>.equals(principal))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,<span class="string">&quot;123&quot;</span>,<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前只有以下用户信息</p><ul><li>用户名：kylin</li><li>密码：123</li></ul><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/image-20211216153510922.png" alt="image-20211216153510922"></p><p>启动项目，登录成功！</p><p>认证功能没有md5和随机盐的认证就实现了</p><h2 id="退出认证"><a href="#退出认证" class="headerlink" title="退出认证"></a>退出认证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();<span class="comment">//退出用户</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subject.logout();</code>退出用户</p><h2 id="MD5、Salt的认证实现"><a href="#MD5、Salt的认证实现" class="headerlink" title="MD5、Salt的认证实现"></a>MD5、Salt的认证实现</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;https://gitee.com/kylincw/images/raw/master/loading.gif&quot; data-lazy-src=&quot;https://gitee.com/kylincw/images/raw/master/img/img/im
      
    
    </summary>
    
    
      <category term="shiro" scheme="https://www.codekylin.cn/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://www.codekylin.cn/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>shiro的授权</title>
    <link href="https://www.codekylin.cn/41181.html"/>
    <id>https://www.codekylin.cn/41181.html</id>
    <published>2021-12-14T12:37:27.000Z</published>
    <updated>2021-12-15T02:34:49.580Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p></blockquote><h2 id="关键对象"><a href="#关键对象" class="headerlink" title="关键对象"></a>关键对象</h2><p><strong>授权可简单理解为who对what(which)进行How操作：</strong></p><p><code>Who，即主体（Subject）</code>，主体需要访问系统中的资源。</p><p><code>What，即资源（Resource)</code>，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括<code>资源类型</code>和<code>资源实例</code>，比如<code>商品信息为资源类型</code>，类型为t01的商品为<code>资源实例</code>，编号为001的商品信息也属于资源实例。</p><p><code>How，权限/许可（Permission)</code>，规定了主体对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p><h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211214204047080.png" alt="image-20211214204047080"></p><h2 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h2><h3 id="基于角色的访问控制"><a href="#基于角色的访问控制" class="headerlink" title="基于角色的访问控制"></a>基于角色的访问控制</h3><p>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">   <span class="comment">//操作什么资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于资源的访问控制"><a href="#基于资源的访问控制" class="headerlink" title="基于资源的访问控制"></a>基于资源的访问控制</h3><p>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">&quot;user:update:01&quot;</span>))&#123; <span class="comment">//资源实例</span></span><br><span class="line">  <span class="comment">//对01用户进行修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">&quot;user:update:*&quot;</span>))&#123;  <span class="comment">//资源类型</span></span><br><span class="line">  <span class="comment">//对01用户进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限字符串"><a href="#权限字符串" class="headerlink" title="权限字符串"></a>权限字符串</h2><p>​        权限字符串的规则是：<code>资源标识符：操作：资源实例标识符</code>，意思是对哪个资源的哪个实例具有什么操作，<code>:</code>是资源/操作/实例的分割符，权限字符串也可以使用<code>*</code>通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user:*：001</li></ul><h2 id="shiro中授权编程实现方式"><a href="#shiro中授权编程实现方式" class="headerlink" title="shiro中授权编程实现方式"></a>shiro中授权编程实现方式</h2><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.hasRole(“admin”)) &#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解式"><a href="#注解式" class="headerlink" title="注解式"></a>注解式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSP/GSP 标签：在JSP/GSP 页面通过相应的标签完成：</span><br><span class="line">&lt;shiro:hasRole name=<span class="string">&quot;admin&quot;</span>&gt;</span><br><span class="line">&lt;!— 有权限—&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">注意: Thymeleaf 中使用shiro需要额外集成!</span><br></pre></td></tr></table></figure><h2 id="开发授权"><a href="#开发授权" class="headerlink" title="开发授权"></a>开发授权</h2><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/img/image-20211215100738926.png" alt="image-20211215100738926"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用自定义realm 加入 md5 + salt + hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerMd5Realm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MD5授权-----------&quot;</span>);</span><br><span class="line">        String primaryPrincipal = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(<span class="string">&quot;身份信息：&quot;</span> + primaryPrincipal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据身份信息 用户名 获取当前用户的角色信息，已经权限信息 kylin admin user</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//将数据库中查询角色信息赋值给权限对象</span></span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">&quot;user:*:01&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">&quot;product:create&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取身份信息</span></span><br><span class="line">        String principal = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">//根据用户名查询数据库</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;kylin&quot;</span>.equals(principal)) &#123;</span><br><span class="line">            <span class="comment">//md5+salt &quot;123&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                    <span class="comment">//数据库用户名</span></span><br><span class="line">                    principal,</span><br><span class="line">                    <span class="comment">//数据库md5+salt之后的密码</span></span><br><span class="line">                    <span class="string">&quot;e4f9bf3e0c58f045e62c23c533fcf633&quot;</span>,</span><br><span class="line">                    <span class="comment">//随机盐</span></span><br><span class="line">                    ByteSource.Util.bytes(<span class="string">&quot;X0*7ps&quot;</span>),</span><br><span class="line">                    <span class="comment">//realm的名字</span></span><br><span class="line">                    <span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加了两个角色</p><ol><li><p>admin</p></li><li><p>user</p></li></ol><p>两个权限字符串</p><ol><li>user:*:01</li><li>product:create</li></ol><p>当用户通过了认证，则会给该用户添加两个角色，两个权限字符串。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://gitee.com/kylincw/images/raw/master/img/img/image-20211215102127035.png" alt="image-20211215102127035"></p><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCustomerMd5RealmAuthenticator</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//创建安全管理器</span>        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();        <span class="comment">//注入realm</span>        CustomerMd5Realm realm = <span class="keyword">new</span> CustomerMd5Realm();        defaultSecurityManager.setRealm(realm);        <span class="comment">//设置realms使用hash凭证匹配器</span>        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();        credentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);        credentialsMatcher.setHashIterations(<span class="number">1024</span>);        realm.setCredentialsMatcher(credentialsMatcher);        <span class="comment">//将安全管理器注入安全工具</span>        SecurityUtils.setSecurityManager(defaultSecurityManager);        <span class="comment">//通过安全工具类获取subject</span>        Subject subject = SecurityUtils.getSubject();        <span class="comment">//认证</span>        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"kylin"</span>, <span class="string">"123"</span>);        subject.login(token);        <span class="comment">//认证用户进行授权</span>        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;            <span class="comment">//基于角色权限控制</span>            System.out.println(subject.hasRole(<span class="string">"admin"</span>));            <span class="comment">//基于多角色的权限控制</span>            System.out.println(subject.hasAllRoles(Arrays.asList(<span class="string">"admin"</span>, <span class="string">"user"</span>)));            <span class="comment">//是否具有其中一个角色</span>            <span class="keyword">boolean</span>[] booleans = subject.hasRoles(Arrays.asList(<span class="string">"admin"</span>, <span class="string">"super"</span>, <span class="string">"user"</span>));            <span class="keyword">for</span> (<span class="keyword">boolean</span> aBoolean : booleans) &#123;                System.out.println(aBoolean);            &#125;            <span class="comment">//基于权限字符串的访问控制 资源标识符:操作:资源类型</span>            System.out.println(<span class="string">"权限："</span> + subject.isPermitted(<span class="string">"user:update:01"</span>));            System.out.println(<span class="string">"权限："</span> + subject.isPermitted(<span class="string">"product:create:03"</span>));            <span class="comment">//分别具有哪些权限</span>            <span class="keyword">boolean</span>[] permitted = subject.isPermitted(<span class="string">"user:*:01"</span>, <span class="string">"order:*:10"</span>);            <span class="keyword">for</span> (<span class="keyword">boolean</span> b : permitted) &#123;                System.out.println(b);            &#125;            <span class="comment">//同时具有哪些权限</span>            <span class="keyword">boolean</span> permittedAll = subject.isPermittedAll(<span class="string">"user:*:01"</span>, <span class="string">"product:create:01"</span>);            System.out.println(permittedAll);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关键对象&quot;&gt;&lt;a href=&quot;#关键对象&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="shiro" scheme="https://www.codekylin.cn/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://www.codekylin.cn/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins介绍</title>
    <link href="https://www.codekylin.cn/31759.html"/>
    <id>https://www.codekylin.cn/31759.html</id>
    <published>2021-11-29T03:15:58.000Z</published>
    <updated>2022-02-11T07:23:20.253Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211129112224230.png" alt="image-20211129112224230"></p><p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动 化构建、测试和部署等功能。官网： <a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a></p><p>Jenkins的特征</p><ul><li>开源的Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</li><li>分布式构建：支持Jenkins能够让多台计算机一起构建/测试。</li><li>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven， docker等。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;https://gitee.com/kylincw/images/raw/master/loading.gif&quot; data-lazy-src=&quot;https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-2021
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>持续集成</title>
    <link href="https://www.codekylin.cn/17998.html"/>
    <id>https://www.codekylin.cn/17998.html</id>
    <published>2021-11-29T02:44:49.000Z</published>
    <updated>2021-11-29T03:20:52.825Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件开发生命周期"><a href="#软件开发生命周期" class="headerlink" title="软件开发生命周期"></a>软件开发生命周期</h3><p>软件开发生命周期又叫做SDLC（Software Development Life Cycle），它是集合了计划、开发、测试 和部署过程的集合。如下图所示 ：</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//img596px-sdlc_-_software_development_life_cycle1.jpg" alt="Software Development Life Cycle(SDLC) | ENVISION"></p><ul><li>需求分析</li><li>设计</li><li>实现</li><li>测试</li><li>进化</li></ul><blockquote><p>需求分析</p></blockquote><p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部 或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。 还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p><blockquote><p>设计</p></blockquote><p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目 计划。计划可以使用图表，布局设计或者文者的方式呈现。</p><blockquote><p>实现</p></blockquote><p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进 行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p><blockquote><p>测试</p></blockquote><p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p><blockquote><p>进化</p></blockquote><p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修 改，bug修复，功能增加等。</p><h3 id="软件开发瀑布模型"><a href="#软件开发瀑布模型" class="headerlink" title="软件开发瀑布模型"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁 衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有 其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开 发， 但是已经不适合现在的开发了。</p><p>下图对软件开发模型的一个阐述。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgf_63b8dd2e1166193c6c63814660c72c4d.png" alt="软件开发流变史：从瀑布开发到敏捷开发再到DevOps - 敏捷文章- 敏捷开发中文社区"></p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>简单易用和理解</td><td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地 增加了工作量。</td></tr><tr><td>当前一阶段完成后，您只需要 去关注后续段。</td><td>由于开发模型是线性的，用户只有等到整个过程的末期才能见 到开发成果，从而增加了开发风险。</td></tr><tr><td>为项目提供了按阶段划分的检查节点</td><td>瀑布模型的突出缺点是不适应用户需求的变化。</td></tr></tbody></table><h3 id="软件的敏捷开发"><a href="#软件的敏捷开发" class="headerlink" title="软件的敏捷开发"></a>软件的敏捷开发</h3><p>敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发 （Incremental Development）</p><h4 id="迭代开发"><a href="#迭代开发" class="headerlink" title="迭代开发"></a>迭代开发</h4><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大 开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。 </p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而 是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨 道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><h4 id="增量开发"><a href="#增量开发" class="headerlink" title="增量开发"></a>增量开发</h4><p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一 号楼，第二个迭代交付二号楼……每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地 基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><blockquote><p>敏捷开发如何迭代？</p></blockquote><p>然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按 照软件工程的方法论，进行正规的流程管理。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgaHR0cHM6Ly93d3cud2FuZ2Jhc2UuY29tL2Jsb2dpbWcvYXNzZXQvMjAxOTAzL2JnMjAxOTAzMDcwNC5qcGc" alt="img"></p><h4 id="开发好处"><a href="#开发好处" class="headerlink" title="开发好处"></a>开发好处</h4><blockquote><p>早期交付</p></blockquote><p><strong>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</strong></p><p>还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。</p><p>敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><blockquote><p>降低风险</p></blockquote><p><strong>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</strong></p><p>请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><p>对于软件项目来说，先有一个原型产品，了解市场的接受程度，往往是项目成功的关键。有一本书叫做《梦断代码》，副标题就是”20+个程序员，三年时间，4732个bug，100+万美元，最后失败的故事”，这就是没有采用敏捷开发的结果。相反的，Instagram 最初是一个地理位置打卡 App，后来发现用户不怎么在乎地理位置，更喜欢上传照片，就改做照片上传软件，结果成了独角兽。</p><p>由于敏捷开发可以不断试错，找出对业务最重要的功能，然后通过迭代，调整软件方向。相比传统方式，大大增加了产品成功的可能性。如果市场需求不确定，或者你对该领域不熟悉，那么敏捷开发几乎是唯一可行的应对方式。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。 是一种软件开发时间。持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。借用网络图片对CI加以理解。</p><p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。</strong>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//img6464255-1b6e3bfdbece1492.jpg" alt="img"></p><p> CD(Continuous Delivery， 中文意思持续交付)是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境(类生产环境)中。比如，我们完成单元测试后，可以把代码部署到连接数据库的Staging环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。下图反应的是CI/CD 的大概工作模式。</p><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//img6464255-ba088ec7257062c0.jpg" alt="img"></p><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><blockquote><p>提交</p></blockquote><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交 （commit）</p><blockquote><p>测试（第一轮）</p></blockquote><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><blockquote><p>构建</p></blockquote><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。 交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实 际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><blockquote><p>部署</p></blockquote><p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。</p><blockquote><p>回滚</p></blockquote><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指 向上一个版本的目录。</p><blockquote><p>组成要素</p></blockquote><ul><li>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成 的， 无需人工干预。</li><li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般 使用SVN或Git。</li><li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器</li></ul><p><img src= "https://gitee.com/kylincw/images/raw/master/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/kylincw/img//imgimage-20211129105509468.png" alt="image-20211129105509468"></p><blockquote><p>好处</p></blockquote><ol><li>降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少</li><li>对系统健康持续检查，减少发布风险带来的问题</li><li>减少重复性工作</li><li>持续部署，提供可部署单元包</li><li>持续交付可供使用的版本</li><li>增强团队信心</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/acelit/article/details/103734928">https://blog.csdn.net/acelit/article/details/103734928</a></p><p><a href="https://www.jianshu.com/p/5f671aca2b5a">https://www.jianshu.com/p/5f671aca2b5a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;软件开发生命周期&quot;&gt;&lt;a href=&quot;#软件开发生命周期&quot; class=&quot;headerlink&quot; title=&quot;软件开发生命周期&quot;&gt;&lt;/a&gt;软件开发生命周期&lt;/h3&gt;&lt;p&gt;软件开发生命周期又叫做SDLC（Software Development Life Cycl
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://www.codekylin.cn/categories/Jenkins/"/>
    
    
      <category term="持续集成" scheme="https://www.codekylin.cn/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="敏捷开发" scheme="https://www.codekylin.cn/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="瀑布模型" scheme="https://www.codekylin.cn/tags/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
</feed>
